<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>goproxy php模式和gae绑定域名详解</title>
      <link href="/posts/b30843c5.html"/>
      <url>/posts/b30843c5.html</url>
      
        <content type="html"><![CDATA[<p>最近被 XX-Net 的602搞得头大，想到了在 heroku 好像还有几个 app 闲着，于是继续折腾 goproxy，没想到两年前的 goproxy 跑得贼溜，而且稳如老狗。于是把方法分享给大家，慎记，因为用的是免费空间，希望大家尽量不要折腾大流量的东东，比如用于下载和视频。昨天，有人提起 goproxy 绑定域名可以复活 gae 代理，于是今天把方法一并分享给大家！</p><a id="more"></a><h3 id="goproxy-php模式详解"><a href="#goproxy-php模式详解" class="headerlink" title="goproxy-php模式详解"></a>goproxy-php模式详解</h3><h4 id="goproxy下载"><a href="#goproxy下载" class="headerlink" title="goproxy下载"></a>goproxy下载</h4><p>以下任选一个地址下载：</p><p>下载页面一： <a href="https://github.com/goproxy0/goproxy/releases" target="_blank" rel="noopener">https://github.com/goproxy0/goproxy/releases</a></p><p>下载页面二： <a href="https://github.com/out0fmemory/Goproxy-Always-Available/releases" target="_blank" rel="noopener">https://github.com/out0fmemory/Goproxy-Always-Available/releases</a></p><h4 id="git部署到heroku"><a href="#git部署到heroku" class="headerlink" title="git部署到heroku"></a>git部署到heroku</h4><p>1、注册一个Heroku账号： <a href="https://signup.heroku.com/signup/dc" target="_blank" rel="noopener">https://signup.heroku.com/signup/dc</a></p><p>2、访问 <a href="https://github.com/yeahwu/goproxy/tree/server.php-go" target="_blank" rel="noopener">https://github.com/yeahwu/goproxy/tree/server.php-go</a></p><p>3、点击 Readme.md 页面下面紫色<code>deploy to heroku</code></p><p>4、输入你想要的名称，服务器随意 US 或 EU</p><h4 id="goproxy-的使用方法"><a href="#goproxy-的使用方法" class="headerlink" title="goproxy 的使用方法"></a>goproxy 的使用方法</h4><p>修改 goproxy 目录下的 php.json 文件中的 Url，可以填写多个app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">&quot;Servers&quot;: [</span><br><span class="line">&#123;</span><br><span class="line">&quot;Url&quot;: &quot;https://appname1.herokuapp.com/index.go&quot;,  </span><br><span class="line">&quot;Password&quot;: &quot;123456&quot;,</span><br><span class="line">&quot;SSLVerify&quot;: true,</span><br><span class="line">&quot;Host&quot;: &quot;&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">&quot;Url&quot;: &quot;https://appname2.herokuapp.com/index.go&quot;, </span><br><span class="line">&quot;Password&quot;: &quot;123456&quot;,</span><br><span class="line">&quot;SSLVerify&quot;: true,</span><br><span class="line">&quot;Host&quot;: &quot;&quot;,</span><br><span class="line">&#125;,</span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>修改 httpproxy.json 文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&quot;Default&quot;: &#123;</span><br><span class="line">&quot;Enabled&quot;: false, //这个是默认的gae模式，关闭或打开都可以，俺是关闭的</span><br><span class="line"></span><br><span class="line">&quot;PHP&quot;: &#123;</span><br><span class="line">&quot;Enabled&quot;: true,  //这个必须改成 true 打开</span><br></pre></td></tr></table></figure><p>修改完上面两处就可以运行 goproxy，windows 点击 goproxy-gui.exe 运行，Linux 直接 cd 到文件夹 ./goproxy ，</p><p>goproxy php 默认的代理主机端口是:</p><p><code>http   127.0.0.1   8088   //建议配合 Proxy SwitchyOmega 使用</code></p><p>安装证书同XX-Net，这里就不多讲了。</p><hr><h3 id="gae绑定域名详解"><a href="#gae绑定域名详解" class="headerlink" title="gae绑定域名详解"></a>gae绑定域名详解</h3><p>在 gae 的 IPV4 基本没用的情况下，俺们可以给 gae 绑域名，gae 自动签证书，就不需要 ip 也能连接 gae 了，下面是方法：</p><h4 id="创建gae-appid"><a href="#创建gae-appid" class="headerlink" title="创建gae appid"></a>创建gae appid</h4><p>首先，注册一个免费域名，这个就不多讲了，自己 google 一下。</p><p>然后就是在点击 <a href="https://console.cloud.google.com/appengine" target="_blank" rel="noopener">appspot.com</a> 创建一个google appid ；</p><p>点击“新建项目 》 写上项目名字，创建 》 创建应用，显示地图，地址随意 》 点击下一步，会显示“为项目启用结算功能”，不要理它，点击取消。</p><p>找到刚新建的 APP Engine, 设置 》 自定义网域，输入域名点击验证 》 这时会出现一条DNS TXT解析记录，不要关闭这个页面，复制这条记录。</p><h4 id="DNS解析记录"><a href="#DNS解析记录" class="headerlink" title="DNS解析记录"></a>DNS解析记录</h4><p>这时俺们要来到你的域名DNS解析网站，然后依照下面的表格填写，A记录，AAAA记录，TXT记录，CNAME记录</p><table><thead><tr><th align="center">Name (prefix)</th><th align="center">Type</th><th align="center">TTL</th><th align="center">Target</th></tr></thead><tbody><tr><td align="center">WWW</td><td align="center">CNAME</td><td align="center">3600</td><td align="center">ghs.googlehosted.com</td></tr><tr><td align="center"></td><td align="center">TXT</td><td align="center">3600</td><td align="center">这里填刚在Google页面复制的记录</td></tr><tr><td align="center"></td><td align="center">A</td><td align="center">3600</td><td align="center">216.239.32.21</td></tr><tr><td align="center"></td><td align="center">A</td><td align="center">3600</td><td align="center">216.239.34.21</td></tr><tr><td align="center"></td><td align="center">A</td><td align="center">3600</td><td align="center">216.239.36.21</td></tr><tr><td align="center"></td><td align="center">A</td><td align="center">3600</td><td align="center">216.239.38.21</td></tr><tr><td align="center"></td><td align="center">AAAA</td><td align="center">3600</td><td align="center">2001:4860:4802:32::15</td></tr><tr><td align="center"></td><td align="center">AAAA</td><td align="center">3600</td><td align="center">2001:4860:4802:34::15</td></tr><tr><td align="center"></td><td align="center">AAAA</td><td align="center">3600</td><td align="center">2001:4860:4802:36::15</td></tr><tr><td align="center"></td><td align="center">AAAA</td><td align="center">3600</td><td align="center">2001:4860:4802:38::15</td></tr></tbody></table><p>保存后，等待几分钟，回到 google 域名验证页，点击验证，google 提示验证成功。</p><p>回到 APP 添加网域界面 》 [选择要使用的网域] 选择刚才的域名，继续 》 [保存映射]，然后继续 》 点击完成。</p><p>等 ssl 证书都签发完之后，“由 Google 托管，自动续订” 后面不转圈且没有感叹号就行，就可以打开 goproxy 使用了。</p><h4 id="设置goproxy"><a href="#设置goproxy" class="headerlink" title="设置goproxy"></a>设置goproxy</h4><p>打开编辑 gae.json 文件，删除 “AppIDs”，其他的 IPV6 ，HTTP2 ，开关也在里面设置。</p><p>给 “CustomDomains” 填上域名，不用加前缀 http 或者 www 如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&quot;CustomDomains&quot;: [</span><br><span class="line">&quot;域名1&quot;,</span><br><span class="line">&quot;域名2&quot;,</span><br><span class="line">&quot;域名3&quot;,</span><br><span class="line"></span><br><span class="line">],</span><br></pre></td></tr></table></figure><p>打开编辑 httpproxy.json 文件,</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&quot;Default&quot;: &#123;</span><br><span class="line">&quot;Enabled&quot;: true, //这是默认的gae开关，保持 true 打开</span><br></pre></td></tr></table></figure><p>修改完上面两处就可以运行 goproxy，windows 点击 goproxy-gui.exe 运行，Linux 直接 cd 到文件夹 ./goproxy ，</p><p>goproxy gae 默认的代理主机端口是:</p><p><code>http   127.0.0.1   8087   //建议配合 Proxy SwitchyOmega 使用，端口不要和 php 模式相同，以免冲突</code></p><p>当然，最后别忘了安装证书！</p>]]></content>
      
      
      <categories>
          
          <category> proxy </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翻墙 </tag>
            
            <tag> goproxy php </tag>
            
            <tag> heroku </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>警惕狭隘民族主义的蛊惑宣传</title>
      <link href="/posts/789c37f8.html"/>
      <url>/posts/789c37f8.html</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/789c37f8/2.jpg" alt="红宝书"></p><p>文 | 王小波</p><p>　　罗素曾说，人活在世上，主要是在做两件事：一、改变物体的位置和形状，二、支使别人这样干。这种概括的魅力在于简单，但未必全面。举例来说，一位象棋国手知道自己的毕生事业只是改变棋子的位置，肯定会感到忧伤；而知识分子听人说自己干的事不过是用墨水和油墨来污损纸张，那就不仅是沮丧，他还会对说这话的人表示反感。我靠写作为生，对这种概括就不大满意：我的文章有人看了喜欢，有人看了愤怒，不能说是没有意义的……但话又说回来，喜欢也罢，愤怒也罢，终归是情绪，是虚无缥缈的东西。我还可以说，写作的人是文化的缔造者，文化的影响直至千秋万代——可惜现在我说不出这种影响是怎样的。好在有种东西见效很快，它的力量又没有人敢于怀疑：知识分子还可以做蛊惑宣传，这可是种厉害东西……</p><a id="more"></a><p>　　在第二次世界大战里，德国人干了很多坏事，弄得他们自己都不好意思了。有个德国将军蒂佩尔斯基这样为自己的民族辩解：德国人民是无罪的，他们受到希特勒、戈培尔之流蛊惑宣传的左右，自己都不知道自己在干什么。还有人给希特勒所著《我的奋斗》做了一番统计，发现其中每个字都害死了若干人。德国人在二战中的一切劣迹都要归罪于希特勒在坐监狱时写的那本破书——我有点怀疑这样说是不是很客观，但我毫不怀疑这种说法里含有一些合理的成分。总而言之，人做一件事有三种办法，就以希特勒想干的事为例，首先，他可以自己动手去干，这样他就是个普通的纳粹士兵，为害十分有限；其次，他可以支使别人去干，这样他只是个纳粹军官；最后，他可以做蛊惑宣传，把德国人弄得疯不疯、傻不傻的，一齐去干坏事，这样他就是个纳粹思想家了。</p><p>　　说来也怪，自苏格拉底以降，多少知识分子拿自己的正派学问教人，都没人听，偏偏纳粹的异端邪说有人信，这真叫邪了门。罗素、波普尔这样的大学问家对纳粹意识形态的一些成分发表过意见，精彩归精彩，还是说不清它力量何在。事有凑巧，我是在一种蛊惑宣传里长大的（我指的是张春桥、姚文元的蛊惑宣传），对它有点感性知识，也许我的意见能补大学问家的不足……这样的感性知识，读者也是有的。我说得对不对，大家可以评判。</p><p>　　据我所知，蛊惑宣传不是真话——否则它就不叫做蛊惑。但它也不是蓄意编造的假话——编出来的东西是很容易识破的。这种宣传本身半疯不傻，做这种宣传的人则是一副借酒撒疯、假痴不癫的样子。肖斯塔科维奇在回忆录里说，旧俄国有种疯僧，被狂热的信念左右，信口雌黄，但是人见人怕，他说的话别人也不敢全然不信——就是这种人搞蛊惑宣传能够成功。半疯不傻的话，只有从借酒撒疯的人嘴里说出来才有人信。假如我说“宁要社会主义的草，不要资本主义的苗”，不仅没人信，老农民还要揍我；非得像江青女士那样，用更年期高亢的啸叫声说出来，或者像姚文元先生那样，带着怪诞的傻笑说出来，才会有人信。要搞蛊惑宣传，必须有种什么东西盖着脸（对醉汉来说，这种东西是酒），所以我说这种人是在借酒撒疯。顺便说一句，这种状态和青年知识分子意气风发的狷狂之态有点分不清楚。虽然夫子曾曰“不得中行而与之必也狂狷乎”，但我总觉得那种状态不宜提倡。</p><p>　　其次，蛊惑宣传必定可以给一些人带来快感，纳粹的千年帝国之说，肯定有些德国人爱听；“文革”里跑步进入共产主义之说，又能迎合一部分急功近利的人。当然，这种快感肯定是种虚妄的东西，没有任何现实的基础。这道理很简单，要想获得现实的快乐，总要有物质基础，嘴说是说不出来的：哪怕你想找个干净厕所享受排泄的乐趣，还要付两毛钱呢，都找宣传家去要，他肯定拿不出。最简单的做法是煽动一种仇恨，鼓励大家去仇恨一些人、残害一些人，比如宣扬狭隘的民族情绪，这可以迎合人们野蛮的劣根性。煽动仇恨、杀戮，乃至灭绝外民族，都不要花费什么。煽动家们只能用这种方法给大众提供现实的快乐，因为这是唯一可行的方法——假如有无害的方法，想必他们也会用的。我们应该体谅蛊惑宣传家，他们也是没办法。</p><p>　　最后，蛊惑宣传虽是少数狂热分子的事业，但它能够得逞，却是因为正派人士的宽容。群众被煽动起来之后，有一种惊人的力量。有些还有正常思维能力的人希望这种力量可以做好事，就宽容它——纳粹在德国初起时，有不少德国人对它是抱有幻想的，但等到这种非理性的狂潮成了气候，他们后悔也晚了。“文革”初起时，我在学校里，有不少老师还在积极地帮着发动“文革”哩，等皮带敲到自己脑袋上时，他们连后悔都不敢了。根据我的生活经验，在中国这个地方，有些人喜欢受蛊惑宣传时那种快感；有些人则崇拜蛊惑宣传的力量，虽然吃够了蛊惑宣传的苦头，但对蛊惑宣传不生反感；不唯如此，有些人还像瘾君子盼毒品一样，渴望着新的蛊惑宣传。目前，有些年轻人的抱负似乎就是要炮制一轮新的蛊惑宣传——难道大家真的不明白蛊惑宣传是种祸国殃民的东西？在这种情况下，我的抱负只能是反对蛊惑宣传。我别无选择。</p>]]></content>
      
      
      <categories>
          
          <category> 思维提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 民族主义 </tag>
            
            <tag> 王小波 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>澄清“言论自由”的各种误区</title>
      <link href="/posts/4eb1d3df.html"/>
      <url>/posts/4eb1d3df.html</url>
      
        <content type="html"><![CDATA[<p>文 | 编程随想</p><p>政治常识扫盲：澄清“言论自由”的各种误区</p><h3 id="言论自由的重要性"><a href="#言论自由的重要性" class="headerlink" title="言论自由的重要性"></a>言论自由的重要性</h3><p>　　为啥俺首先想到要普及“言论自由”的常识，因为言论自由非常重要性。以下是俺总结的重要性。</p><h4 id="对“基本人权”而言"><a href="#对“基本人权”而言" class="headerlink" title="对“基本人权”而言"></a>对“基本人权”而言</h4><p>　　在“基本人权”里面，排在第二位的是“自由权”，而言论自由是“自由权”的重要组成部分。所以在基本人权里，“言论自由”是很重要的一块。（可能有同学会好奇：“基本人权”里排在第一位的是啥？是“生命权”。）<br>　　关于“基本人权”的更详细介绍，可以看维基百科的“这个词条”。这里就不再多罗嗦了。</p><a id="more"></a><h4 id="对“民主制度”而言"><a href="#对“民主制度”而言" class="headerlink" title="对“民主制度”而言"></a>对“民主制度”而言</h4><p>　　言论自由对民主体制同样是非常重要的。“民主”的核心包括两个要点：其一是“公民对公共事务的参与”，其二是“公民对公权力的监督”。这两个要点都离不开“言论自由”。<br>　　有些国家虽然也搞了一人一票的直接选举，但这些国家没有很好地保障“言论自由”。那么就有可能蜕变成“名为民主，实为专制”。</p><h4 id="对“互联网时代”而言"><a href="#对“互联网时代”而言" class="headerlink" title="对“互联网时代”而言"></a>对“互联网时代”而言</h4><p>　　21世纪也被称为互联网时代、信息时代。在日常生活中，基于网络的沟通越来越多，影响面也越来越大。所以俺觉得，非常有必要消除“对言论自由的误解”。</p><h3 id="公共空间-VS-私人空间"><a href="#公共空间-VS-私人空间" class="headerlink" title="公共空间 VS 私人空间"></a>公共空间 VS 私人空间</h3><p>　　这是最被忽视的一个误区，连很多自由派的网友都不晓得【公共空间】和【私人空间】的差别。混淆这两者的后果就是——在不该运用“言论自由”的场合强调言论自由——这导致了“对言论自由的【误用】”。</p><h4 id="啥是“公共空间”？"><a href="#啥是“公共空间”？" class="headerlink" title="啥是“公共空间”？"></a>啥是“公共空间”？</h4><p>　　“公共空间”也称为“公共领域”，洋文是“public sphere”。考虑到“公共领域”一词很容易跟“公有领域”混淆（“公有领域”是版权/著作权方面的术语）。所以本文只使用“公共空间”这个说法。</p><p>　　啥是“公共空间”捏？它符合如下几个特征：</p><p>1、不属于任何个人，不属于任何组织/机构。</p><p>2、任何公民都可以参与其中。</p><p>3、参与其中的公民可以自由地谈论公共事务。</p><blockquote><p>举例1：<br>最有名的公共空间，大概就是英国伦敦海德公园的“演说者之角”。连共产运动的两位知名教主（马克思和列宁）都曾经在那发表演说，可见其宽松的程度。</p></blockquote><blockquote><p>举例2：<br>在咱们天朝，基本上是找不到公共空间的。比如说天安门广场，它符合“公共空间”的头两个特征，但不符合第3个特征。</p></blockquote><blockquote><p>举例3：<br>经常有人把“公共场合”等同于“公共空间”，这是错误滴！很多公共场合是【有主的】，并不能算公共空间。比如餐馆属于“公共场合”，但不是“公共空间”。</p></blockquote><h4 id="啥是“私人空间”？"><a href="#啥是“私人空间”？" class="headerlink" title="啥是“私人空间”？"></a>啥是“私人空间”？</h4><p>　　“私人空间”是跟“公共空间”相对应的术语，洋文叫“private sphere”。私人空间通常都属于某个组织、机构、个人。</p><blockquote><p>举例1：<br>比如你自己家里就是你的私人空间。</p></blockquote><blockquote><p>举例2：<br>比如你在网上开设的个人博客或者个人网站也是你的私人空间。</p></blockquote><h4 id="哪些场合下才有言论自由？"><a href="#哪些场合下才有言论自由？" class="headerlink" title="哪些场合下才有言论自由？"></a>哪些场合下才有言论自由？</h4><p>　　搞清楚“公共空间”和“私人空间”的概念之后，俺再来说一下这两种场合的言论自由。</p><p>　　只有在公共空间或者是【自己的】私人空间，才有言论自由。那么，在【别人的】私人空间有没有言论自由捏？这就要看那个私人空间的主人是否给你言论自由。如果空间的主人允许，你就有；反之，则没有。</p><blockquote><p>举例1：<br>比如你到某个论坛发帖，被站长删了。站长有没有违背言论自由捏？没有。因为论坛属于站长的“私人空间”，站长作为“所有者”，爱咋删就咋删。这是他/她的自由。</p></blockquote><blockquote><p>举例2：<br>比如音乐厅禁止观众在演奏期间说话，有没有违背言论自由捏？没有。因为音乐厅也是私人空间（可能属于某个公司或个人），私人空间就可以设立规则禁止言论。</p></blockquote><h3 id="言论自由-VS-诽谤"><a href="#言论自由-VS-诽谤" class="headerlink" title="言论自由 VS 诽谤"></a>言论自由 VS 诽谤</h3><p>　　诽谤是否受言论自由保护？这又是一个很容易搞混淆的问题。对于这个问题，不同的国家有不同的立法。从立法的差异就可以看出民主成熟度的差异。下面俺分别介绍这些差异。</p><h4 id="言论的形式：陈述事实-VS-陈述观点"><a href="#言论的形式：陈述事实-VS-陈述观点" class="headerlink" title="言论的形式：陈述事实 VS 陈述观点"></a>言论的形式：陈述事实 VS 陈述观点</h4><p>　　言论大致上可以分为两类：“陈述事实”和“陈述观点”。那么“事实”与“观点”之间有何差异捏？请看俺之前的博文《批判性思维扫盲：学会区分“事实”与“观点”》。建议你先把之前这篇博文看完，再继续往下看本文。因为很多同学自以为清楚“事实与观点的差异”，其实不然。</p><p>　　下面是不同国家的差异。</p><p>　　较好的国家</p><p>　　有些国家的立法明确规定：“陈述观点”的言论不能算“诽谤”。</p><blockquote><p>举例：<br>比如美国的立法明确规定，“对观点的表述，无论侮辱性多强，依照美国法律均【不构成】诽谤。”。<br>所以在美国，如果有人说：“我认为小布什是历史上最烂的总统”。这【不会】构成诽谤——因为这是陈述【观点】。</p></blockquote><p>　　显然，这样的立法具有更宽松的言论自由环境。</p><p>　　较差的国家</p><p>　　有些国家对言论的类型没有明确规定，也就是说，“陈述观点”也有可能构成诽谤。</p><h4 id="言论的对象：活人-VS-死人"><a href="#言论的对象：活人-VS-死人" class="headerlink" title="言论的对象：活人 VS 死人"></a>言论的对象：活人 VS 死人</h4><p>　　有可能牵涉到诽谤罪名的言论，必定是针对“某人”的。关于言论的对象，还可以分两种：活人，死人。</p><p>　　下面是不同国家的差异。</p><p>　　较好的国家</p><p>　　有些国家的立法明确规定：“诽谤罪的前提是针对活人”。换句话说，你可以随便骂已经死亡的人，不算诽谤。为啥会有这个前提捏？因为这些国家对“诽谤罪”的定义是，必须使得言论的对象造成【实质性伤害】。而死人是不存在“实质性伤害”的。</p><p>　　显然，这样的立法具有更宽松的言论自由环境。</p><p>　　较差的国家</p><p>　　在有些国家，没有批评【死人】的言论自由。</p><blockquote><p>举例：伊斯兰教国家，<br>在某些奉行政教合一的伊斯兰国家，如果你胆敢批评穆罕穆德（伊斯兰教的创始人，已死了上千年），你的下场会很惨。</p></blockquote><h4 id="言论的对象：普通人-VS-公职人员"><a href="#言论的对象：普通人-VS-公职人员" class="headerlink" title="言论的对象：普通人 VS 公职人员"></a>言论的对象：普通人 VS 公职人员</h4><p>　　对于“言论的对象”，俺刚才解释“活人”与“死人”的差异。除了这个差异，还存在另一个差异：身份的差异。身份的差异有很多种，俺重点说一下“普通人”和“公职人员”的差异（所谓的“公职人物”就是在政府部门担任职务的人）。</p><p>　　下面是不同国家的差异。</p><p>　　较好的国家</p><p>　　有些国家的立法，对“普通人”的保护力度更【大】，对“公职人物”的保护力度更【小】。为啥要对“公职人物”区别对待捏？刻意【减少】对“公职人物”的保护，反过来也就是方便对“公职人物”进行批评监督。这样民众就可以比较放肆地对政府官员进行批评，而不用担心被控诽谤。</p><blockquote><p>举例：美国的“真实恶意原则”</p></blockquote><blockquote><p>比如美国的立法明确规定，“诽谤罪，适用于公职人员和普通个人的标准不同。如果原告是公职人员，原告必须【证明】被告（发言者）存在【真实恶意】，诽谤的罪名才能成立。”（这就是美国法律界非常有名的“真实恶意原则”，这是最高法院审理“纽约时报诉沙利文案”确立的，该案的维基词条在“这里”）</p></blockquote><blockquote><p>所谓的“真实恶意”是指：发言人明知【事实陈述】是虚假的，依然发表该事实陈述。从这个定义可以看出：要【证明】“真实恶意”是非常困难滴（因为这涉及到，证明一个人的内心活动），所以美国【公职人员】在这类诉讼中很难获胜。</p></blockquote><blockquote><p>反之，如果是针对普通的人的诽谤诉讼，原告无需证明被告（发言者）具有【真实恶意】。</p></blockquote><p>　　显然，这样的立法具有更宽松的言论自由环境，非常有利于对政府的监督。说到“监督政府”，其重要性可以参见之前的博文《对政府——多些“监督问责”，少些“煽情感动”》</p><p>　　较差的国家</p><p>　　有些国家，不区分“公职人员”和“普通人”。在这些国家中批评政府官员就要当心了——因为政府官员可以反过来告你诽谤。</p><blockquote><p>举例：新加坡</p></blockquote><blockquote><p>在这方面，最典型的例子就是新加坡。新加坡的三代领导人（李光耀、吴作栋、李显龙）非常善于用“诽谤罪”来打压反对党和舆论的批评。</p></blockquote><blockquote><p>新加坡反对党的领导人徐顺全因为批评政府领导人，被控“诽谤罪”，受到巨额罚款，几乎倾家荡产。连美国报刊（比如：华尔街日报、纽约时报、等）驻新加坡的记者都多次被控告“对新加坡领导人诽谤”。</p></blockquote><p>　　奇葩的国家</p><p>　　还有一种国家比“较差的国家”还要差，不妨称之为“奇葩的国家”（比如天朝就是）。在这些国家中，名义上也有针对“诽谤罪”的立法。但这些立法仅仅是摆设。在这些国家中，如果你胆敢批评政府领导人（不管你的批评言论是否构成“诽谤罪”），都会被逮捕。</p><p>　　换句话说，这些国家同前面提到的“较好的国家”是【相反】滴。在“奇葩的国家”里面，你诽谤普通人，通常没啥事。但绝对不允许你批评政府领导人。</p><h3 id="言论自由-VS-煽动暴力-煽动仇恨"><a href="#言论自由-VS-煽动暴力-煽动仇恨" class="headerlink" title="言论自由 VS 煽动暴力/煽动仇恨"></a>言论自由 VS 煽动暴力/煽动仇恨</h3><p>　　很多人（包括很多自由派网友）都以为，“煽动暴力和煽动仇恨”不受言论自由保护。其实不一定。下面俺来详细介绍。</p><p>　　在多数国家，“煽动暴力/煽动仇恨”都不受言论自由保护。尤其是煽动颠覆政府的言论，更加不受保护。但如果你仔细考察美国的立法，你会发现：对于暴力言论，美国的立法是“既宽松又细致”。</p><p>　　在美国的立法中，对这类言论是否违法，有一个判断原则叫“明显且即刻的危险”（由霍尔姆斯大法官1919年首次提出）。这个判断原则，通俗地说就是：某人发布的“煽动暴力/煽动仇恨”言论，如果会导致【立即】的违法行为，并且违法行为的危害很严重，该言论才会被判违法；反之，就是合法的，受言论自由保护。</p><blockquote><p>举例1：<br>如果某人在美国发表言论说：“希望用暴力方式推翻美国政府”。<br>这句话虽然煽动暴力，但【没有】违法，依然受言论自由保护。因为这句话没有产生“即刻性的危险”。</p></blockquote><blockquote><p>举例2：<br>假如某个【很有影响力】的宗教领袖对其信徒说：“今天晚上去放火把某某人的房子烧了”。<br>这句话就会被判违法。因为发言者具有影响力（宗教领袖），而且言论包含了迫在眉睫的时间（今晚）和严重的威胁（纵火）。</p></blockquote><p>　　刚才这两个例子都是俺杜撰的，所以某些同学或许还将信将疑。为了更加具有说服力，给大伙儿介绍一下美国司法史上著名的判例：</p><blockquote><p>“布兰登伯格诉俄亥俄州案”（Brandenburg v. Ohio）</p></blockquote><blockquote><p>美国俄亥俄州有一个三K党（Ku Klux Klan）首领叫布兰登伯格（没听过三K党的同学，先去查维基百科）。此人在1968年通过电视发布了一段反黑人反犹太人的演讲。其中一句是：“如果总统、国会和最高法院继续压制白种人，我们将采取某些报复行动。我们有40万人，将于7月4日向国会进军。”</p></blockquote><blockquote><p>由于这个演讲，俄亥俄州当地法官判处布兰登伯格10年监禁。俄亥俄州法官的判决依据是当地的《组织犯罪防治法》。布兰登伯格不服，提起上述，最后一直闹到最高法院。最高法院在1969年作出裁决，9名大法官一致认定：俄亥俄州的《组织犯罪防治法》违宪，布兰登伯格胜诉。</p></blockquote><blockquote><p>最高法院给出的裁决书中提到：煽动言论不但要【相当可能】导致【即刻】的危害，而且危害必须【相当明显和严重】，政府才能采取限制言论的行动。</p></blockquote><p>　　俺估计，某些不了解美国言论自由的同学，第一次看到这样的案例，会被惊得目瞪口呆。</p><h3 id="言论自由-VS-冒犯-挑衅言论"><a href="#言论自由-VS-冒犯-挑衅言论" class="headerlink" title="言论自由 VS 冒犯/挑衅言论"></a>言论自由 VS 冒犯/挑衅言论</h3><p>　　说完“煽动暴力/煽动仇恨”言论，顺便说说“冒犯性/挑衅性言论”。</p><p>　　还是以美国为例，看看美国的立法如何对待“冒犯和挑衅言论”。在1942年的“查普林斯基诉新罕布什尔州案”（洋文是 Chaplinsky v. New Hampshire），最高法院裁决：含“挑衅字眼”（fighting word）的言论是违法的，【不受】言论自由保护。为了防止被滥用，对啥是“挑衅字眼”有严格的定义。必须【同时符合】如下三条，才算。</p><p>1、通过激怒别人而“煽动【即刻的】破坏和平行为”的言论；</p><p>2、这些言论“由普通人通过【常识判断】很可能会引发【暴力】反应”；</p><p>3、这些言论还必须是“【直接针对】听者”。</p><p>　　从上述定义再次看出，美国的立法非常细致——细致才有可操作性，从而避免判决时，人为的随意性。</p><p>　　关于“冒犯和挑衅言论”的立法还没完。二战后发生了另一个案子“皮条客杂志诉福尔韦尔案”（洋文是 Hustler v. Falwell，维基词条在“这里”）。这个案子也闹到了最高法院。最高法院给出的裁决是：针对“公众人物”（public figure）的冒犯性讽刺完全受言论自由保护。裁决中所说的“公众人物”，涵盖了政府官员和各种名人。</p><p>　　经过这两个判例，美国确立了：针对普通人（private figure）的冒犯言论是违法的，不受言论自由保护；相反，针对“公众人物”（public figure）的冒犯性言论受言论自由保护。<br>　　对比一下奇葩的天朝。</p><p>　　咱们伟大的党国跟万恶的美帝国主义当然是相反滴——在天朝，用言论挑衅普通人通常没啥事。但如果你胆敢用言论挑衅朝廷高官，就让你吃不了兜着走。不信请看如下例子：</p><blockquote><p>举例：天朝的“一坨屎劳教案”<br>重庆市民方洪，网名“方竹笋”。2011年，此人在网上发了一个帖子，讽刺薄熙来和王立军在重庆的“黑打”（李庄案）。帖子原文如下：<br>“这次就是勃起来屙了一坨屎叫王立军吃，王立军端给检察院，检察院端给法院，法院叫李庄吃，李庄律师说他不饿，谁屙的谁吃，这不退给王博士了，他主子屙的他不吃谁吃！”<br>“方竹笋”因为此帖被抓去劳教两年。薄熙来倒台之后，才放出来。如果薄熙来没倒台，可能就远远不止两年啦。</p></blockquote><h3 id="言论自由-VS-淫秽-色情言论"><a href="#言论自由-VS-淫秽-色情言论" class="headerlink" title="言论自由 VS 淫秽/色情言论"></a>言论自由 VS 淫秽/色情言论</h3><p>　　在多数国家中，“淫秽”与“色情”言论是不受言论自由保护的。但是，何种言论才算是“淫秽/色情”，其边界是非常模糊滴。比如“人体艺术”算不算色情，争议就很大。</p><p>　　在这方面，美国的立法值得参考。美国最高法院在审理“米勒诉加利福尼亚州案”（Miller v. California）的时候，确立了法学界很有名的“米勒测试原则”。这个原则主要包含如下三条：</p><p>1、在本地当前的社会标准中，所涉及的对象或作品就其【总体而言】会唤起【普通人】的淫欲（prurient interest）；</p><p>2、对性行为的描写引起人们的【明显反感】，并违反各州法律；</p><p>3、作品就【总体而言】，缺乏严肃的文学、艺术、政治或科学价值。</p><p>（以上三条判定【同时】成立，该言论被判定为“淫秽言论”，不受言论自由保护）</p><p>　　该原则还有若干附录细则。比如说：有一本书的内容符合上述的“米勒测试”。但如果你只是在家中私藏这本书，没有拿出来公布，那就是合法的。</p><p>　　另外，美国法律对“儿童色情”有更严厉的限制。比如：私藏儿童色情内容是违法的。不光是美国，欧美主要的民主国家，对儿童色情的都有严厉的限制。在之前的博文《五毛谬论点评——“每个国家都有审查制度”》中，俺有提到西方民主国家对儿童色情的立法，细致到何种程度。</p><p>　　从上述介绍可以看出：“米勒测试原则”是比较细致的。这样的好处是：具有较高的“可操作性”，降低了审理案件时，人为的、随意性的因素。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>　　本文多次举了美国的例子。为啥捏？因为美国在“保护言论自由”方面做得非常到位。即使成熟度比较高的民主国家，言论像美国这么宽松的，也不多见。</p><p>　　最后，引用美国最高法院霍尔姆斯大法官在1929年的一句话，作为本文的结尾：</p><p>【宪法原则中最重要的是“自由思想的原则”——不是确保我们喜欢的思想的自由，而是确保我们所憎恨的思想的自由。】</p><p>（不知道列位看官中，有多少人能够真正体会此话的深意）</p><p><a href="https://program-think.blogspot.com/2014/02/freedom-of-speech.html" target="_blank" rel="noopener">原文链接，被墙</a></p>]]></content>
      
      
      <categories>
          
          <category> 思维提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 言论自由 </tag>
            
            <tag> 基本人权 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下的终端代理和git常用命令</title>
      <link href="/posts/2d01ac9.html"/>
      <url>/posts/2d01ac9.html</url>
      
        <content type="html"><![CDATA[<p>十一临近，号称国内唯一不受工信部监管的外网 GitHub 也间接性抽风，所以不得不未雨绸缪，给 Linux terminal 挂上代理，以防 GitHub 彻底挂了，下面是方法。</p><h3 id="Linux终端挂上代理"><a href="#Linux终端挂上代理" class="headerlink" title="Linux终端挂上代理"></a>Linux终端挂上代理</h3><p>ProxyChains 是一个终端代理方案，使用比较简单，直接安装：</p><p><code>$ apt install proxychains</code></p><p>编辑 <u>/etc/proxychains.conf</u> 文件，vi 翻至最下面，把默认的 tor 的代理方式、端口换成你的代理端口，比如常用的 Shawdowsocks 代理：</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ vi /etc/proxychains.conf</span><br><span class="line"></span><br><span class="line">翻到最下面把 tor 端口改成：</span><br><span class="line"> </span><br><span class="line">socks5    127.0.0.1    1080</span><br></pre></td></tr></table></figure><p>使用</p><p>先启动代理，连接至服务器，然后，只需要在运行程序的命令前加上 proxychains 即可。</p><p>以俺上传博客为例，命令行输入： </p><p><code>$ proxychains hexo deploy</code></p><p>git 同理：</p><p><code>$ proxychains git push</code></p><p>优点：ProxyChains 只会影响指定运行程序</p><p>测试</p><p><code>$ proxychains curl www.google.com</code></p><h3 id="git分支改动和提交"><a href="#git分支改动和提交" class="headerlink" title="git分支改动和提交"></a>git分支改动和提交</h3><p>首先克隆你的整个项目仓库</p><p><code>$ git clone git@github.com:username/origin.git</code></p><p>切换分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd project</span><br><span class="line">$ git branch</span><br><span class="line">$ git checkout -b gh-pages origin/gh-pages  //在本地新建远程分支的镜像（此时模板文件将全部复制到本地文件夹中）</span><br><span class="line">$ git checkout gh-pages  //切换分支</span><br></pre></td></tr></table></figure><p>这个时候分支数据已经切换过来了，看看</p><p><code>$ cd project &amp;&amp; ls</code></p><p>这个时候你就可以改动分支内容了，完了以后正常 push</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add .</span><br><span class="line">$ git commit -m &quot;更新说明&quot;</span><br><span class="line">$ git push origin gh-pages</span><br></pre></td></tr></table></figure><p>切换回主分支</p><p><code>$ git checkout master</code></p><h3 id="git常用命令"><a href="#git常用命令" class="headerlink" title="git常用命令"></a>git常用命令</h3><p><code>git init</code> git初始化</p><p><code>git config --global user.name &quot;xxx&quot;</code> 配置用户名</p><p><code>git config --global user.email &quot;xxx@xxx.com&quot;</code> 配置邮件</p><p><code>git add .</code> 把所有变化提到暂存区</p><p><code>git add xxx</code> 把制定文件提到暂存区</p><p><code>git status</code> 查看当前文件状态</p><p><code>git commit -m &quot;&quot;</code> 提交更新</p><p><code>git commit -am &#39;xxx&#39;</code> 将 add 和 commit 合为一步, 但只能 cover 到已被 track 的文件</p><p><code>git show commit_id</code> 显示某个提交的详细内容</p><p><code>git log</code> 查看 commit 日志</p><p><code>git reset --hard commit_id</code> 回退到某个 commit</p><p><code>git revert commit_id</code> 进入到某个 commit 的代码，并生成新的 commit</p><p><code>git remote -v</code> 查看本地关联的远程仓库</p><p><code>git remote add xxx</code> 地址 关联远程仓库，名字为xxx</p><p><code>git remote rename oldname newname</code> 修改远程仓库的名字</p><p><code>git remote rm name</code> 删除名字为 name 的远程仓库的关联</p><p><code>git pull name branch</code> 拉取名字为 name 的远程仓库的 branch 分支</p><p><code>git push name branch</code> 推送名字为 name 的远程仓库的 branch 分支</p><p><code>git checkout -b branch [remote/master]</code> 新建并进入一个名字为 branch 的分支 可选参数指在某个分支基础上新建</p><p><code>git checkout branch</code> 切到名字为 branch 的分支</p><p><code>git branch -D branch</code> 删除名字为 branch 的分支</p><p><code>git branch -a</code> 查看所有分支 包括本地和远程</p><p><code>git clone</code> 地址 克隆项目到本地</p><p><code>git fetch [name] [branch]</code> 将获取远程仓库的更新取回本地，取回的代码对本地的开发代码没有影响，无参数时默认取所有</p><p><code>git merge branch</code> 把 branch 分支合并到当前分支</p><p><code>git push name :branch</code> 删除名字为 name 的远程的 branch 分支</p><p><code>git rebase -i HEAD~x</code> 或 <code>git rebase -i commi_id</code> (commi_id 不参与合并的) 合并多个 commit, pick 改为 s, 如有冲突，解决以后继续 <code>git add . git rebase --continue</code> 取消合并 <code>git rebase --abort</code></p><p><code>git tag name [commit_id]</code> 增加名字为 name 的 tag, commit_id 的 commit 处打 tag</p><p><code>git tag</code> 查看所有 tag，按字母排序</p><p><code>git tag -d name</code> 删除名字为 name 的 tag</p><p><code>git push origin tagname</code> 把名字为 tagname 的 tag 推到远程</p><p><code>git push --tags</code> 把所有 tag 推送到远程仓库</p><p><code>git push origin :refs/tags/&lt;tagname&gt;</code> 删除远程 tag</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> Linux终端代理 </tag>
            
            <tag> git常用命令 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>苏联解体前的六个瞬间</title>
      <link href="/posts/6aab4bcc.html"/>
      <url>/posts/6aab4bcc.html</url>
      
        <content type="html"><![CDATA[<p>文 | 慕容雪村</p><p>大卫·雷姆尼克是《纽约客》杂志的总编辑，在1987－1991年间，他是《华盛顿邮报》派驻莫斯科的记者，在四年多的时间里，他采访过苏联社会的各个阶层，也见证了这个强大政权的失败。后来他把这些采访集结成书，这就是他的名著《列宁的坟墓》，此书获得了1994年的普利策奖。下面这篇文章所提及的事实大都出自此书，有一些也参考了别的资料。许多句子都是直接引用，因为网络发表，未能一一注明。部分语句是我参照英文原文重新翻译的，和台湾版稍有不同。</p><a id="more"></a><h3 id="《忏悔》的公映"><a href="#《忏悔》的公映" class="headerlink" title="《忏悔》的公映"></a>《忏悔》的公映</h3><p>1987年，格鲁吉亚导演钦吉兹·阿布拉泽的电影《忏悔》在全国公映。这是苏联解体之前极为重要的文化事件。影片完全虚构，情节有点像后来的美剧《暴君》：阿拉维泽是一位1930年代的州长，年轻的时候，他曾经许诺要为人民建立“人间天堂”，但大权在握之后，他开始残暴地践踏和虐待当初支持他的人。晚年愈发昏愦，甚至想开枪射下太阳。他把自己的朋友，艺术家山德罗关进了集中营，后者就死在那里。多年之后，山德罗的女儿柯蒂开始追寻父亲的死亡之旅，并决定复仇。那时阿拉维泽已死，柯蒂挖开了他的坟墓，撬开了他的棺材，并把他的尸体拖出来“罚站”。</p><p>在那个时候，苏联依然强大，审查部门依然有着不容质疑的权力。但和大多数极权政府一样，因为官员的昏庸草率，审查总有缝隙，政府也不可能禁绝所有的事。《忏悔》提交申请时说是一部“关于道德与伦理的电影”，其实影射意图十分明显，片中的阿拉维泽就是斯大林。</p><p>那时戈尔巴乔夫上台已经两年，许多人都知道，戈氏的祖父、外公都曾是斯大林时代的囚犯，他对斯大林不可能完全没有意见。而当时苏联和世界的局势，也要求他必须以一种较为开明和宽松的姿态出现。在1987年1月的苏共中央会议上，他宣布要进行经济和政治体制改革。一个月后，他在克里姆林宫告诉记者：苏联将填补“历史的空白处”，“我们不能忘记那些人的名字，如果我们遗忘或不去追寻那段沉默岁月中的牺牲者姓名，那是不道德的。我们必须揭露历史的真相。</p><p>《忏悔》公映之后，在苏联各界引起了巨大的轰动。它不仅公开说出了极权的罪恶，也让成千上万的苏联人开始反思罪恶的来源以及成因。或许可以说，正是这部电影揭开了苏共一直遮挡和掩盖的那些东西，把“我们不能这么活”的念头深植于每个人心中。值得一提的是，戈尔巴乔夫本人也看过这部电影，看过之后，也正是他当批准了《忏悔》的公映。</p><p>苏联解体之后，有记者采访钦吉兹·阿布拉泽，问他当初为什么想拍这么一部电影，他反问道：这个，难道不是我们的责任吗？</p><h3 id="基马的卡片"><a href="#基马的卡片" class="headerlink" title="基马的卡片"></a>基马的卡片</h3><p>《忏悔》让无数苏联人感觉振奋和激动，基马就是其中之一。他本名叫德米特里·尤拉索夫，生于1964年，比王小山只大几岁，但脑容量要比王小山大上八百多倍。从高中时代起，基马就致力于一件在当时毫不起眼、后来却证明无比重要的工作：他收集那些在苏共统治下被囚禁、被处决的受害者名单，然后把这些名字写入卡片，卡片上列有他们的姓名、生卒年月、被迫害的事实……到1988年，24岁的基马已经填满了200，000张卡片。换言之，在成千上万的遇难者尸体中，他已经找到了20万具确证无疑的骸骨。</p><p>在戈尔巴乔夫上台前后，或者说，从更早的赫鲁晓夫时代开始，苏联的军警特务就已经无力阻止人们在饭桌上谈论这个政权所犯下的累累罪恶。这也是极权末期常见的景象，当独裁者的权力日渐软弱，平民的反抗——无论是行动还是言语——就会越来越直接和激烈，而任何试图重建极权的努力都将被证明是徒耗心力，他们需要面对的不仅是平民的愤怒，还有知识精英的嘲笑，以及整个官僚系统的懈怠与抵制。在1987－1988年间，在莫斯科、彼得堡这样的大城市，有自由主义倾向的知识人开始自发地聚集起来，他们讨论历史和时事，嘲笑苏共及其领导人，模仿他们的动作、姿势和话语，常常引起哄堂大笑。许多我们熟知的苏联笑话就出自其中。其中一个不定期的聚会就是“莫斯科论坛”，参加者包括著名的萨哈罗夫，以及列恩·卡平斯基，后者是苏联著名的红二代，其本人也曾是体制内的明星，但在1987年前后，他开始公然称自己为“半个异议分子”。</p><p>基马是“莫斯科论坛”最年轻的参加者，萨哈罗夫这种“长胡子的成年人”一定给了他不少启发，但他也不完全赞同他们的意见，事实上，他常常在论坛中露出轻蔑的笑容。按今天的说法，基马出身于一个粉红色的家庭，他爸爸是一位体制内的工程师，他妈妈热爱斯大林以及斯大林的时代，他们家从不谈论时事，也从来不读那些“反动的”地下刊物，但基马还是一点点褪去了身上的粉红色，渐渐成了一个坚定的异议者。</p><p>他当过兵，退伍之后在苏联最高法院的“书库”找到一份工作，书库里藏有数百万份“罪犯档案”，基马就利用这些档案慢慢充实自己的卡片。这种事注定不会长久，他的一位主管很快发现了他的秘密，他们开除了他，失业之后的基马做过一段时间搬运工，但一直到1988年，他始终没有放弃自己的卡片事业。</p><p>没人知道基马后来过着怎样的生活。在苏联解体以及后来的一系列动荡中，他的名字没有再出现过。我想他应该不会死，他今年52岁，也算是美好年华，不知道他会不会为自己年轻时的所作所为自豪。但在当时，并不是每个苏联人都能理解他的工作，有人这样问他：你很有热情，但你是否想过，你的热情能否带来任何有意义的东西？</p><h3 id="安德烈耶娃的来信"><a href="#安德烈耶娃的来信" class="headerlink" title="安德烈耶娃的来信"></a>安德烈耶娃的来信</h3><p>在1988年之际，苏联意识形态部门的官员对“舆论乱象”忧心忡忡，无数卡通、新闻小报、电视节目都在传播着他们不喜欢的“异端邪说”，在那年的一月，《旗帜》杂志刊登了话剧《前进、前进、再前进》的剧本，在这出戏的高潮部分，剧作家借罗莎·卢森堡的话来批判斯大林式的社会主义：“没有政治自由的社会主义不是社会主义，只有支持政府的人才能得到的自由，也绝对不是自由。”然后就是列宁的台词：“太棒了，罗莎！”</p><p>苏联的媒体向来都把吹捧领袖当成自己的责任，比如勋章大王勃列日涅夫，他一生获得过114枚奖章，其中相当一部分都是他自己颁给自己的。有个笑话讲的就是这个：勃烈日涅夫被鳄鱼吞了，接下来会发生什么？——那条鳄鱼连着屙了一个礼拜的勋章。不出意料的是，这位勋章大王还是成就极高的畅销作家，他的小说三部曲《微小的土地》、《处女地》和《复兴》出版于1978年，当年红极一时，并且获得了最高文学奖。但世人很快就会知道，这些作品没有一个字是出自他之手。</p><p>在1988年，《前进、前进、再前进》利用列宁来反对斯大林，算是一大发明。但意识形态官员还是很快嗅出了不祥的气味。1989年1月8日，《真理报》主编当着戈尔巴乔夫的面激烈地批评《前进、前进、再前进》，认为这出戏不仅“不精确”，而且“污蔑了苏联的历史”。虽然戈尔巴乔夫并不同意他的见解，但两天后，《真理报》还是刊出了批评文章，并引起了相当大的轰动。</p><p>“安德烈耶娃事件”就发生在这样的氛围之中。</p><p>妮娜·安德烈耶娃是彼得堡（当时还叫列宁格勒）的一位化学教师，当时刚满50岁，虽然斯大林已经死了36年，但她和那时代的许多苏联人一样，依然狂热地爱着斯大林，绝难容忍那些“诽谤和诬蔑斯大林”的言行。1989年2月1日，她投书《苏维埃俄罗斯报》，认为“目前国内外的局势歪曲了社会主义的历史”，而《前进、前进、再前进》则背离了马列主义，认为斯大林或许犯了错，但也正是他领导苏联取得了卫国战争的伟大胜利。“这些人要我们相信苏联的过去全是错误和罪恶，却对过去和现在的伟大成就一字不提。”“斯大林时代确实很困难，但人民都有工作，也可以保卫国家，没有那么多外国作品污染他们的心灵，也没有那么多庸俗文化污染他们的灵魂……”</p><p>这封信在1989年3月13日见报，苏联的舆论场瞬间为之沸腾，无数电报、电话打进《苏维埃俄罗斯报》的编辑部，平民、官员，甚至是戈尔巴乔夫的军事顾问，都对这封信表示赞美和支持。在苏共高层的推动下，这篇文章很快被各地报刊转载，连东德的《新德意志报》也不例外。在这篇文章的带动下，苏联本已活跃起来的舆论场再次陷入肃杀和沉默之中，用当时一位编辑的话说：“那是一个令人颤栗的时刻，我们所期望和梦想的一切，都处于生死关头。”</p><p>他们的惊恐自有道理。在那时，苏军依然是世界上最强大的军队，意识形态部门依然有着生杀予夺的权力，《真理报》的社论比法院的判决书更加致命，但自后来者观之，他们其实没必要那么惊恐，那时已经是1989年的3月，离苏联最终的失败，只剩下两年多一点的时间。</p><p>妮娜·安德烈耶娃住在彼得堡郊外的“共产国际大街”，在1989年的初春，这条街上满目荒凉。本书的作者大卫·雷姆尼克在一片静谧之中敲响了安德烈耶娃家的大门。</p><p>如果不考虑政治立场，妮娜·安德烈耶娃的品行几乎无可挑剔，她生活简朴，甚至有点过于严肃，她出生于俄罗斯的贫穷家庭，一辈子遵从党的教导，也服从党的召唤，几乎没有伤害过任何人。她爱国，有同情心，工作也兢兢业业，还烧得一手好菜。在她50岁的时候，她的国家发生了一场突如其来的变化，她一生之所信、一生之所为都在这场变化中显得脆弱和危险，她为此而奋起抗争。</p><p>“无论如何这个国家都需要秩序。我们现在并不是一个完整的国家，而是一群无政府主义者组成的乌合之众。……国家、秩序都没有了，什么都没有了，而国家的意义就在于秩序、秩序、秩序！”</p><p>像安德烈耶娃这样的人所在多有。他们一生都活在《真理报》的阴影之下，他们的教科书、他们的报纸、他们的广播都对他们有着深远的影响，这些媒体把斯大林塑造成一个英雄，一个全才，甚至是一个完人，在几十年的浸淫和教导之下，这已经成了他们的青春记忆和人生信条，怀念斯大林就等于怀念青春，而否定斯大林就相当于否定了自己的一生。这需要相当的勇气。事实上，他们对斯大林的所作所为并不是完全无知，在1988－1989年间，无数媒体已经报道斯大林的所犯下的种种罪恶，但他们依然抗拒和排斥，对某一部分事实，他们选择无视；对另一部分事实，他们斥为捏造；而对剩下的那些，他们则竭尽所能地寻找理由：卫国战争那么艰难的时期，不搞大清洗能行吗？那么多坏蛋要破坏我们的社会主义建设，不镇压能行吗？没错，他确实杀过人，但在那样的时期，不杀人能行吗？……</p><p>“年轻人从《青年》《微火》这种杂志究竟可以学到什么？”当安德烈耶娃走进厨房，她沉默的丈夫这样问大卫·雷姆尼克，“不就是说斯大林是个偏执狂、性变态、好色之徒、酒鬼和罪犯吗？他们甚至把他和‘你懂的’相提并论，好像这个人一点贡献都没有似的。”</p><p>有些偏激的人可能会说，安德烈耶娃和她的丈夫不是蠢就是坏，但我想也可能有第三种情形：他们得了某种病，一种对新事物的接受无能。而之所以接受无能，无非是因为以前强加给他们的东西过于强大。在苏联末期，像安德烈耶娃这样的人为数极多，他们抗拒新思潮，也反对变化，但变革始终要来。“民心向背”是一句大而无当的话，但苏联的结局可以证明：一个社会的变革，并不取决于有多少人反对变革，而是取决于有多少人期待变革、欢迎变革。</p><h3 id="破烂展览会"><a href="#破烂展览会" class="headerlink" title="破烂展览会"></a>破烂展览会</h3><p>从1922年苏联建立以来，苏共高层一直过着奢华甚至放荡的生活，他们有豪华的别墅，有特供食品，当然也有触目惊心的腐败，而且越到后期，腐败就越严重。而与此同时，苏联民众一直生活在水深火热之中，多次发生饥荒，其中最著名的就是1932－1933年的大饥荒。因为荒唐而邪恶的集体农庄制，以及对农民的过分盘剥，苏联至少有700万人饿死。在素有“欧洲面包篮”之称的乌克兰，至少有300万人死于这场饥荒。</p><p>到1989年，苏联民众的悲惨生活已经为世界所知。《共青团真理报》在那一年发表了一篇报道，说在1917年之前，俄罗斯的人均消费水平排全球第七，而在苏共执政67年之后，已经降到了全球第七十七，“在罗马尼亚之前，南非之后。”</p><p>在北方的沃尔库塔，因为没有足够的肥皂，矿工们没法洗净脸上的煤灰；在白俄罗斯，村民只能在垃圾堆里翻找金属碎片，才能换到足够的钱买一双鞋子；在西伯利亚的秋明油田，矿工们只能住在破烂的小屋或简陋的拖车里，即使在零下四十度的寒冬。据某些官员估计，当时苏联全国大约有150万－300万流浪汉，光乌兹别克就有超过100万人失业。婴儿死亡率比大多数西方国家高出2.5倍……</p><p>大约就是在那一年，在莫斯科电视塔附近的“经济成就展览馆”，几位策展人决定举办一场别开生面的展览。这个展馆本来是苏联政府自我炫耀和吹嘘的地方，常年摆放着他们在科技、航天等领域的重要成果，以及那些红脸膛、肌肉发达的工人农民。但到了末期，这样的吹嘘和炫耀越来越让人厌烦，真相于是就出现了。</p><p>这是空前绝后的展览会，所有的展品都来自附近的商店，包括烂莴苣、破鞋、破锅、生锈的茶具、袖子不一样长的上衣、丑得吓人的珠宝，以及一瓶泡着死老鼠的矿泉水。一位运输工人这样告诉大卫·雷姆尼克：“这些还不算糟，我见过更差的。有些商店连这些烂货都没有。”</p><p>苏联解体之后，有人提出这样的疑问：这个政权如此强大，养了那么多人，为什么在它行将失败的时候，竟然没有一个人站出来维护它？我想1989年的那场破烂展览会已经可以回答这个问题：如果一个政权只能制造这样的破烂，为什么要维护它？如果一个政权可以罔顾民生到如此程度，它的失败又有什么可惋惜的？难道它不该失败吗？</p><h3 id="亚历山大·曼的葬礼"><a href="#亚历山大·曼的葬礼" class="headerlink" title="亚历山大·曼的葬礼"></a>亚历山大·曼的葬礼</h3><p>亚历山大·曼是一位东正教神父，在苏联的最后几年，他的勇气和虔诚同样为人称道，有人甚至称他为宗教界的萨哈罗夫。他坚持不与政府合作，对克格勃们也没什么好颜色，多年来一直受到苏联政府的骚扰和迫害，被抄家，被审问，时常收到死亡邮件。但他依然不为所动，坚持教授《圣经》，在各个教会中公开地演讲，有时甚至会出现在电视上。</p><p>我确信亚历山大·曼受到过天主教宗约翰·保罗二世的影响。1979年，保罗二世在华沙老城的胜利广场对40万人发表演讲，告诉他们“不要恐惧”，而且坚信“领导波兰明天的将是耶稣”。这次访问对瓦文萨有着莫大的影响，2013年我曾经当面问他：“是什么给了你力量，让你甘愿冒着那么大的风险，一次次坚持抗争？”瓦文萨回答：“最大的支持者就是教皇。在他来华沙之前，我奋斗了十年，只发展了一百个同志；而在他来华沙带领我们祈祷之后，我只用一年时间就发展了一百万个同志。”</p><p>亚历山大·曼一定知道这段史实，他似乎也有志愿像保罗二世一样，做一个社会变革时期的精神领袖，从勃烈日涅夫末期到戈尔巴乔夫时代，他的身边始终围绕着一群知识精英，在后来的意识形态之争中，这群知识精英起了至关重要的作用。</p><p>1990年的9月9日，55岁的亚历山大·曼走过一条树林中的小路，一个暴徒拿着斧子蹿了出来，沿着一条沥青小道穿过树林，一斧砍中了神父的后脑勺。重伤流血的神父又坚持着走了300米，拒绝了路人的帮助，最后死在自己的家门前。没人知道凶手是谁，但从那时到现在，许多人都相信这是克格勃干的，记者亚历山大·敏金在他的报道中这样写道：苏联政府就是要（用这样的方式）警告我们：“你们没有任何抵抗的能力”。</p><p>葬礼那天，人们从四面八方赶来，其中有平民、宗教领袖，当然也少不了他的知识精英信徒，人们献上白花，流着泪悼念他平生的英勇和虔诚，说了许多赞美的话，但几乎没有人主持追查凶手。</p><p>在亚历山大·敏金看来，这场葬礼证明了苏联人的软弱，他在报道中提到了1984年波兰的那起神父被杀案，“那次事件让波兰人民奋起抗争”，而面对几乎同样的事件，苏联人的表现要差得多，“我们站在一起，却在讨论别的事情。……我们比不上我们的东欧兄弟……我们不仅没有奋起反抗，甚至不会因此而感觉愤怒……”</p><p>这段话十分悲观，而且有着强烈的自怨自艾意味，似乎在说“我们这个民族不行啊，我们没有血性啊”。但自事后观之，这一声哀叹并无必要。敏金的文章大约发表于1990年的9月16日，不出一年，他就会看到成千上万的莫斯科市民走上街头，面对坦克和机枪，坦然地、毫不畏惧地发出他们的声音：“不要向自己的人民开枪！回去抵抗你们的长官！”</p><h3 id="维尔纽斯的血"><a href="#维尔纽斯的血" class="headerlink" title="维尔纽斯的血"></a>维尔纽斯的血</h3><p>在1991年最后的几个月，苏共和苏军并不像人们想像得那么软弱，事实上，它们极为强悍，不惮于扣动扳机，也不介意踏着平民的鲜血“从胜利走向胜利”。而戈尔巴乔夫也并不是人们想象中的那个温和开明的民主主义者，直到1986年2月，他还对媒体发表这样的见解：斯大林主义是共产主义的敌人编造的概念，也是对苏联和社会主义的严重污蔑。同年6月，他还对苏联作家们发表指示：如果我们清理过去，就会失去这个国家所有的能量，我们必须向前……把国家的能量带往进步的方向。</p><p>1991年1月13日，苏联克格勃特种部队——其中包括几十架坦克——开向立陶宛维尔纽斯的电视大楼，向聚集在那里的示威人群猛烈开火，至少造成14人死亡，一百多人受伤。许多人都遭受过枪击、殴打，甚至是坦克碾压。这就是著名的“维尔纽斯惨案”。这起惨案不光在苏联国内，也在国际社会引起了极大愤慨，奇怪的是，没有一位苏共高层愿意站出来对此事负责，戈尔巴乔夫说自己没有下令，国防部长说自己没有下令，内政部长也说自己没有下令，听上去感觉是军队集体走火了。</p><p>这并不是唯一的惨案。到1991年，苏联到处都在发动游行示威，人们控诉苏共与克格勃的罪行，也发出要求民主与自由的呼声。大卫·雷姆尼克曾经见过这样一幅标语：全世界无产者，原谅我们！苏共强硬派对这些游行越来越缺乏耐心，越来越频繁地动用机枪、坦克和毒气瓦斯，在格鲁吉亚的底比利斯，在阿塞拜疆的巴库，民众的游行示威全都遭到了残酷的镇压。3月27日，在莫斯科，为了阻挡和镇压民众示威，内务部派出了超过五万名警察，国家通讯社塔斯社发出了极为严厉的警告，莫斯科的克格勃头子更是发誓“将不惜使用任何手段”。</p><p>但一切都为时已晚，再过144天，就是著名的八一九政变，为了挽救这个政权，或者说，为了保住他们的官位和特权，苏共的强硬派使出了最后的手段，他们绑架了国家元首，宣布国家进入紧急状态，也把军队和坦克派到了广场上，但这一切，连垂死挣扎都算不上，他们所留下的“不惜血战”的身影，最后只是一场笑话，他们什么都没有保住，只是加速了这个政权的溃败，还有他们自己的耻辱。</p><p>关于苏联的失败，至今依然是一个谜，“看着他起高楼，看着他楼塌了”，没人能够说清这大楼是如何倒塌的，但我相信，它一定与上面所列事实有关，这些事实未必是决定性的，但就像墙上的裂缝，当它们日日加深，再高的楼也终将变成瓦砾一堆。</p><p>那栋楼并不值得怀念，值得怀念的是那些曾在危楼之下生活过的人们，就像这本书中引用的，那位古拉格的囚犯给他的爱人所写的信：在我们还有力气和希望的时候，请让我们保存希望。生命中最恐怖的事情不是死，而是完全绝望。这是最可怕的自杀方式：在你还有力气的时候就划掉所有可能，并且放弃战斗。</p>]]></content>
      
      
      <categories>
          
          <category> 思维提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 苏联解体 </tag>
            
            <tag> 以史为鉴 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>洗脑与爱国主义教育</title>
      <link href="/posts/c7607ee2.html"/>
      <url>/posts/c7607ee2.html</url>
      
        <content type="html"><![CDATA[<p><img src="/posts/c7607ee2/1.jpg" alt="红旗插满月球"></p><p>文 | 杨恒均</p><p>　　苏联著名的科学家巴甫洛夫发现了“条件反射”：当他在训练一条狗时，把食物与某种动作联系起来，那么今后他指令这条狗做某种动作就非常容易，甚至狗会为了食物而不自觉地做某个动作。列宁听说了巴甫洛夫的理论，若有所思，过了几天，他让人把巴甫洛夫招进宫来。</p><a id="more"></a><p>　　能被列宁招到克里姆林宫，巴甫洛夫很是兴奋，且做了一番功课，准备把自己的高深理论以通俗的方式呈现给伟大领袖。但列宁只听了一半就打断他，慈祥地笑着说：你的试验非常有意义，但我对狗没有兴趣。他饶有兴致地问迷惑不解的巴甫洛夫：如果把试验中的狗换成人，会怎么样呢？</p><p>　　巴甫洛夫后来是否直接介入大规模对人的试验不得而知，但列宁同志把巴甫洛夫的科学理论用于对苏联社会主义新人的改造，则是有目共睹的。从此以后，苏联开展的社会主义教育，让“公民们”言听计从，只要你不相信、不服从，你就有可能被发配到西伯利亚，甚至被处死。于是乎，只经历不到两代人，苏联人民，基本上都同巴甫洛夫的狗一样，为了食物、为了生存，而重复一些不可思议的动作，例如告密，例如“爱国”，例如疯狂地热爱冷酷无情的领袖与那个残害同类的党，例如杀人、放火……</p><p>　　这个从对狗的试验而得出的理论，从苏联传到世界各地，成为东欧、亚洲等多个社会主义国家用来对民众进行“洗脑”的科学依据。据苏联的老同志在回忆录中记载，列宁同志曾兴奋地宣称，把巴甫洛夫的科学理论用于人类，是比任何武器都强大百倍的“致命武器”，它能确保苏联的江山万年不倒。他的继任者则计划，搞定了苏联人民后，只要再把这个理论推广到西方国家，那么不用核子武器，全世界都将会匍匐在苏联的脚下。可惜，苏联当时没有四万亿，所以无法输出他们的价值观，否则，我们今天可能不是驾驶日本、德国车，而是驾驶伏尔加；我们不是在看好莱坞大片，而是拉着手风琴而唱着红歌。</p><p>　　不过，千万别以为苏联不存在了，上面的故事就成了笑话。苏联已经倒掉20多年，但如果你去现在的俄国接触苏联时代教育出来的人，你依然可以感受到，大多苏联人同巴甫洛夫试验的那些狗还有相同之处。这就是“洗脑”的威力，这就是愚民、奴化教育的强大力量与难以消除的后果。</p><p>　　还有几个鲜活的例子值得一提。去过东西德的人都会注意到，两德统一这么多年了，西德也不遗余力地资助东部德国，可这一国的两个地区还依然判若云泥，社会主义东德留下假大空的建筑以及对资源的破坏只是一个方面，更重要的还是人的价值观、信仰与精神面貌。一位德国教育家曾伤感地告诉我：东西德要想真正“统一”，除非等到被社会主义东德教育起来的那几代人都去见了上帝。</p><p>　　如果你觉得扯欧洲的事有点远，那么，你应该不难接触到朝鲜人与韩国人吧？我可以告诉你，南北朝鲜的统一并不困难，（由于国家不大）经济差距也不是无法弥补的，但要想现在存活着的朝鲜人与韩国人在价值观与思想上达到“统一”，是绝对不可能的。北朝鲜政权对朝鲜民族最大的伤害不是经济也不是政治，而是用那种违反文明社会规则、反人类的方式进行“洗脑”，弄残了整整几代的朝鲜人！资源破坏经过几代人的努力，也许可以恢复；经济破坏可以奋起直追；政治走上邪路也可以拨乱反正，唯独一个国家的人民都脑残了，则只能等到他们慢慢死去，希望才能够闪现。</p><p>　　一个政权能够对国民造成的最大伤害除了肉体上消灭与精神上折磨之外，最大的就是“洗脑”了。有人说，洗脑对统治者有利，也可以维护社会和谐，让民众失去反抗，只关心自己的生活。他们却不知道，洗脑是让一个民族脑残，让一个国家永远沦落到劣等国家的最行之有效的方法，一个人，一个民族一旦被洗脑，他们不但在人格上永远沦落为犬类，而且在发明创造，在生产精神财富上，也永远落后于其他民族。因此，当一些人打着爱国主义教育的旗帜来洗脑的时候，我要强调的是：正因为爱这个国家，才要坚决地抵制洗脑！</p><p>　　我们看到，现代文明国家，国民除了限制政府的权力，利用民主决定统治者的合法性，以及用法治捍卫个人自由之外，对政府介入“教育”公民保持着高度的警惕性。大家知道，能够代表美国政府立场的“美国之音”是不允许在美国国内广播的，而美国总统奥巴马要到小学去做一个有关国会的演讲，竟然都被家长抵制，最后不得改变初衷而去讲了一些不关痛痒的教育问题。生活在海外的华人都知道，我们的孩子在学校如果被灌输意识形态与某个执政党的执政理念，我们会立即到学校找老师理论，甚至会去国会大厦外抗议！</p><p>　　然而，不可否认的是，地球上任何一个国家，都有对学校的孩子们进行国情与爱国主义教育（有的称通识教育）的情况，例如，当我在澳洲首府堪培拉访问时，战争纪念馆与议会大厦不时涌进一大队的澳洲小学生，老师与家长带他们到处参观，为他们讲解。看一孩子脸上的表情，我能够感受到他们对这个国家的爱戴。然而，如何教育孩子，采用的什么内容，以及用什么方式，却直接决定这到底是爱国主义教育还是赤裸裸的洗脑。</p><p>　　目前世界上大多数人民生活水平较高高、社会相对稳定的国家，都对“教育”与“洗脑”有着非常明确的界定：一个政权教育民众毫无保留地接受现实，对当今执政者的政策与成绩歌功颂德，是洗脑；一个执政党（例如澳洲的工党）向孩子们灌输爱党就是爱国，是洗脑；一个老师，不教导孩子们独立思考，而是填鸭式地告诫他们如何服从老师与当权者，也是洗脑；把大量有违事实的“知识”、大话甚至谎言塞给孩子们，并让他们考试的时候以此作为“标准答案”，更是洗脑。</p><p>　　洗脑的种类很多，但最可怕的一种洗脑就是当权者主导的。我们大家都知道启蒙，也有些朋友认为我一直在做启蒙。实际上，近代欧洲等启蒙的历史表明，启蒙要想成功，当时的国家政权一定不能太独断专行，例如允许部分的言论自由，而且，他们不会强力主导“洗脑”。只有在这种情况下，启蒙才有可能成功。而在希特勒、斯大林主导的国家里，“洗脑”的力量是如此的强大，强大到无处不在，一个孩子从牙牙学语开始就被“洗脑”，等到他们成长起来，基本上已成为思想上的侏儒，精神上的畸形儿，可以说靠杯水车薪的启蒙是无法奏效的。当然，更可悲的是，他们根本不知道自己被洗脑，甚至大多数人又参与到对自己和对下一代的“洗脑”接力赛中。</p><p>　　以个人或者群体知识分子为主的启蒙运动，根本无法对抗以全民体制为主的“洗脑”教育，历史事实揭示一个让人胆战心惊的真理：列宁、斯大林式的“洗脑”国家，没有一个是靠启蒙运动发挥作用而渐变，最后的变化要么就是靠杀死独裁者的革命，要么就是靠执政者内部的某种形式的“政变”。毫不客气地说，大多民众，被洗脑得连他们自己都认为自己没有被洗脑——而这正是被洗脑的最显著的特征，也是世界上最成功的洗脑。</p><p>　　谢天谢地，列宁、斯大林式的洗脑国家，在当今地球上，除了北朝鲜之外，还真没有几个了。对于我来说，这些年耗尽了自己的精力，我以我血荐轩辕，就是想以自己的文字，把一些事情尽量说清楚，能做多少就做多少。但真要靠这样几行文字，试图去纠正一个强大的教育体系的洗脑结果，实在是杯水车薪。</p><p>　　好在还有香港，我恳求你们，留一片净土吧！爱这个国家的人们，就是要坚决反对以洗脑的方式强迫人家去“爱国”，那是误国，那是残害民族，而不是爱国！</p><hr><p>PS: 如今香港这片净土也岌岌可危了！</p>]]></content>
      
      
      <categories>
          
          <category> 思维提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 洗脑 </tag>
            
            <tag> 爱国主义 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GitHub Pages上的301重定向</title>
      <link href="/posts/8c0a6bf2.html"/>
      <url>/posts/8c0a6bf2.html</url>
      
        <content type="html"><![CDATA[<p>记录 GitHub Pages 上301重定向踩过的坑。</p><p>其实俺的要求很简单，12ab.cf 能定向跳转到 <a href="http://www.12ab.cf">www.12ab.cf</a> .</p><p>本来是 CNAME 解析到 github.io ,一切都是那么顺利，新的域名也能打开，解析速度俺也能接受，做个301重定向就完美了！</p><p>想想，在 Freenom DNS 上做个 A 记录解决吧，于是 prefix 留空， GitHub IP 填上，确定。显示错误 username 不能留空，能理解，能理解，填上 @ 继续，还是显示错误，能理解，每个 DNS 网站的表达方式不同嘛。</p><a id="more"></a><p>继续，填上 * 小星星一颗，错误。可能是俺的表达方式太害羞了，于是直白一点， 填上 NOPREFIX ，结果是接受了。兴冲冲地去打开 12ab.cf 检验一下，打不开，也不能跳转。</p><p>于是俺迷茫了！</p><p>是不是 GitHub Pages 不能支持301跳转？</p><p>要不干脆整两个仓库，直接写个js， 404.html 跳转？</p><p>是不是 Freenom DNS 不支持 A 记录跳转？换 CNAME 记录试试？</p><p>要不要换个 DNS 解析网站？</p><p>要不干脆整个小 VPS？</p><p>搭上梯子（还好这门手艺没落下）打开 Freenom ，没道理前缀不能留空呀？于是，小手一抖填上一个点 . 选择 A 记录，填上 GitHub 的 IP ，确定，退出。<br>几分钟后，打开浏览器，站长工具 http 状态查询，返回码301，居然就这样跳转了。</p><p>总结一下，GitHub Pages 是支持301重定向的，但是仅限单个域名，如果换域名的话还是比较麻烦的! 虽然现在也支持了Let’s Encrypt 加密，但是速度还是不适合建站。</p><p>Freenom 的 DNS 解析，主要是还没找到一个国外合适的 DNS 解析，国内的暂不考虑，再就是，又不是不能用！</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages </tag>
            
            <tag> dns </tag>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幸存者偏见，附巴菲特著名演讲</title>
      <link href="/posts/ef540c36.html"/>
      <url>/posts/ef540c36.html</url>
      
        <content type="html"><![CDATA[<p>文 | 编程随想</p><h4 id="何为“幸存者偏见”？"><a href="#何为“幸存者偏见”？" class="headerlink" title="何为“幸存者偏见”？"></a>何为“幸存者偏见”？</h4><p>　　“幸存者偏见”，洋文写作“survivorship bias”或“survival bias”。这玩意儿属于“认知偏差”的一种。</p><p>　　如果用一句通俗的话来概括“幸存者偏见”，就是【死人没法开口】。如果要说得更具体点，那就是：<br>当你在分析某个事物的时候，可能会面对诸多的证据（样本）。但是大多数人通常只注意到【显式】的样本和证据，而忽略了【隐式】的样本和证据。从而得出错误的认知、错误的结论。</p><p>　　为了更形象一些，俺来说一下“幸存者偏见”的出处——古罗马的西赛罗（与凯撒同时代的知名政治家、文学家、演说家）讲过一个故事，大意如下：</p><a id="more"></a><p>有一群宗教信徒在某次沉船事故中幸存。幸存后捏，他们就找人作画（画面上是一群人在事故中祈祷），以此来宣扬说：因为他们作了虔诚的祷告，所以才在沉船事故中幸存。</p><p>某信徒拿了这幅画给一个无神论者看。这个无神论者直接反问道：那些祈祷之后淹死的人，他们的画像在哪里？</p><p>　　以上就是“幸存者偏见”的出处。那些“祈祷之后依然淹死的人”，他们已经死了，不可能再去告诉别人，他们的祈祷失灵了。</p><h4 id="不同领域中的“幸存者偏见”"><a href="#不同领域中的“幸存者偏见”" class="headerlink" title="不同领域中的“幸存者偏见”"></a>不同领域中的“幸存者偏见”</h4><p>　　西赛罗的那个故事，属于宗教领域的“幸存者偏见”。除了宗教领域，还有很多领域（甚至可以说，所有的领域）都会存在这类偏见。下面，俺挑选几个领域来举例。</p><p>1：IT 领域——创业的“银弹”</p><p>　　作为 IT 从业人员，俺经常在某些 IT 网站上看到某某公司的创业事迹。如果你也跟俺一样，估计这方面的故事也看了不少。</p><p>　　不知你有没有发现，那些广为流传的创业案例，都是【成功】案例。越成功的，越具有传奇色彩，被宣传的次数就越多（比如乔布斯、盖茨）。相反，那些创业【失败】的案例，（相比而言）被提及的次数非常非常少。</p><p>　　这会产生啥问题捏？</p><p>　　假设某个有志青年想要创业，他看了很多创业成功的案例，这些案例都提到某些共同的因素。于是捏，此人就误以为这些共同的因素是“银弹”——只要具备这些银弹，创业必定成功。这就如同西赛罗的那个故事——只看到存活的祈祷者，就误以为“祈祷”是存活的【充分条件】。</p><p>2：成功学领域——虚假的“充分条件”</p><p>　　说完“创业”，很自然就联想到“成功学”。那些鼓吹“成功学”的文章/书籍，通常存在很多谬误，其中一个谬误是——号称“某某方法论”是成功的【充分条件】。换句话说，只要具备了该方法论，就一定可以获得成功。</p><p>　　为啥俺说这是一个谬误捏？因为这些鼓吹成功学的文章/书籍，通常都【没有】去检验：该方法论是否也出现在失败者身上。只要有一个失败者也采用了该方法论，就足以说明——这个方法论【不是】成功的充分条件。</p><p>　　比如说，很多成功学的理论提到了“勤奋”是成功的充分条件。但其实捏，勤奋而没有成功的，大有人在。</p><p>3：投资领域——仅凭运气的“股神”</p><p>　　最近半年，天朝股市迎来新一轮的牛市行情。前几天有读者建议俺聊聊股市的话题，所以今天顺便拿投资领域来说事儿。</p><p>　　似乎在每一个国家的股市中，都有那么几个人被誉为“股神”。如果碰到牛市，被冠以“股神”的人还会再多出好几倍。</p><p>　　（暂且【不】考虑“弄虚作假、谎报战绩”的情况）假设这些获得股神称号的人，都在实际操作过程中获得远高于大盘的收益率，他们有资格获得“股神”的称号吗？</p><p> 为了说明这个例子，俺转载某篇文章的其中一段（此文写于1984年）。</p><blockquote><p>我要各位设想—场全国性的抛硬币大赛。让我们假定，全美国2.25亿人，在明天早晨起床时都掷一枚硬币，并猜硬币出现的正面或反面。如果猜对了，他们将从猜错者的手中赢得一美元。而猜错的人则被淘汰。</p></blockquote><blockquote><p>每天都有输家遭到淘汰，奖金则不断地累积。经过十个早晨的十次投掷之后，全美国约有22万人连续十次猜对抛硬币的结果。每人所赢得的资金约1000多美元。</p></blockquote><blockquote><p>现在，这群人可能会开始炫耀自己的战绩，此乃人的天性使然。即使他们仍保持谦虚的态度，但在鸡尾酒会中，他们偶尔会以此技巧吸引异性的注意，并炫耀他们对抛硬币的奇特洞察力。</p></blockquote><blockquote><p>游戏继续进行，再经过十天，约有215个人连续20次猜对抛硬币的结果，并且每个人赢得大约100万美元的奖金。输家总共付出2.25亿美元，赢家则得到2.25亿美元。</p></blockquote><blockquote><p>这时候，这群赢家会完全沉迷在自己的成就中——他们可能开始著书立说：“我如何每天早晨工作30秒，并在20天之内将—美元变成100万美元。”更糟的是，他们会在全国各地主办培训班，宣传如何有效地抛硬币。</p></blockquote><blockquote><p>对那些持怀疑态度的学者，他们会反驳说：“如果你认为这是不可能的，该如何解释，为什么会有我们这215个人呢？”</p></blockquote><blockquote><p>但是，某些商学院的教授可能会粗鲁地指出—个事实——假如让2.25亿只猩猩参加这场比赛，结果大致上也是如此——会有215只猩猩连续赢得20次的投掷。</p></blockquote><p>　　大伙儿知道这篇文章的作者是谁吗？作者就是被誉为“股神”的巴菲特。（1984年，为了纪念《证券分析》出版50周年，哥伦比亚大学搞了一次隆重的纪念活动，邀请到巴菲特作主题演讲。这篇文章就是当年的演讲稿）</p><p>　　大伙儿可能会觉得奇怪——难道巴菲特想要说明：“自己是运气好的猩猩”？</p><p>　　当然不是啦。在那篇演讲的后续部分，巴菲特分析了——为啥他本人【不是】运气好的猩猩。在本文的结尾部分，俺还会再次提到这个演讲，以及巴菲特对“幸存者偏见”的分析。</p><p>　　虽然巴菲特不是“运气好的猩猩”，但俺敢肯定，在咱们天朝，某些所谓的“炒股高手”，只不过是“运气好的猩猩” :)</p><p>4：政治领域——天朝貌似和谐的舆论</p><p>　　本来这篇是专门谈“思维和心理学”，不涉及政治的。但是俺还是忍不住要来抹黑一下咱们的朝廷 :)</p><p>　　俺的大部分读者，都生活在天朝之内。如果你也是，应该很清楚一点——天朝的主流媒体（电视、报刊、杂志、墙内网站），都是比较和谐的。在国内的主流媒体上，你看不到“对国家领导人的批评”，也看不到“对政府的批评”。</p><p>　　如果你根据“国内主流媒体的一片和谐”，来推论“国内民意也是一片和谐”，那你就陷入了“幸存者偏见”。</p><p>　　在这个例子中，存在两种“沉默的样本”:</p><p>其一，<br>有些人在墙内的网站上发表了不和谐的言论，但是很快就被网站的网管给删除了。删除之后，别人自然就看不到了——这就变成了“沉默的样本”；</p><p>其二，<br>在天朝，有些人虽然对现实很不满，但是他们的生活条件太差了，以至于都不具备上网的条件（比如说，连网吧的钱都付不起）。所以，他们不可能在网络上发出自己的声音。</p><p>5：历史领域——莎草纸的误导</p><p>　　历史这个领域，简直可以说是“幸存者偏见”的重灾区。因为历史研究的是“过去发生的事情”。如果“过去的事情”距离现在比较遥远，很多相关的东西可能已经被时间消磨殆尽——沦为沉默的证据。</p><p>　　下面，俺以“莎草纸”来说明“幸存者偏见”的误导性。</p><p>　　在地中海周边的古代文明（古埃及、腓尼基、古希腊、古罗马）都曾经使用莎草纸作为书写文字的载体。在保存至今的文物中，埃及的莎草纸文物比另外那三个地方要多。于是就很容易给人一种误解——似乎莎草纸在埃及用的比较广泛，而在另外三个地方使用不够广泛。但真实的原因是——莎草纸在潮湿环境中非常容易发霉腐烂，而埃及的气候比较干燥，于是保存下来的就比较多。</p><p>　　另一个例子是：曾经有一种学术观点认为腓尼基民族是“只擅长于经商而缺乏文艺细胞”。因为腓尼基留存至今的【少量】莎草纸都跟经商有关，并没有发现跟文学艺术相关的莎草纸文物。</p><p>　　真的是这样吗？</p><p>　　俺个人认为，更大的可能性是：腓尼基人也有自己的文学艺术并且也保存在莎草纸上。但是那些腓尼基城市的气候非常不利于保存莎草纸，于是当地的莎草纸文物都腐烂了。至于少量涉及经商的莎草纸文件能保存至今，有可能是被经商船队带到其它地区（比如埃及这种干燥的地区），从而在其它地区保存了下来。</p><p>6：其它领域</p><p>　　在前面俺说了，几乎所有的领域，都可以看到“幸存者偏见”。限于篇幅，俺只列举前面这几个。对这个话题有兴趣的同学，可以在评论中补充。</p><h4 id="“幸存者偏见”导致的问题"><a href="#“幸存者偏见”导致的问题" class="headerlink" title="“幸存者偏见”导致的问题"></a>“幸存者偏见”导致的问题</h4><p>　　接下来，俺总结一下“幸存者偏见”可能导致的问题——分三个方面。</p><p>1：错误的认知</p><p>　　这个最好理解了——由于“错误的认知”会导致你对“沉默证据”的忽视，所以你对该领域的认知是不完全的。</p><p>2：错误的归因</p><p>　　在【只看到】“显式样本”的情况下，你可能会产生一些错误的归因。“幸存者偏见”导致的“错误归因”会有很多种。俺这里仅举几个例子。</p><p>　　因果倒置</p><p>　　想必大伙儿都看过举重比赛。对于举重运动员，很多人都有一个错误的观点——以为这些运动员是在练习举重之后，才导致身材变得矮壮。</p><p>　　但实际上捏，举重队在一开始筛选运动员的时候，就把那些身材细长的忽略掉了（这些身材细长的候选人，就是“沉默的样本”）。</p><p>　　换句话说，是因为他们身材矮壮，才有可能被选中去参加举重培训，而不是因为参加举重培训导致身材如此——这就是【因果倒置】.</p><p>　　牵强的归因（无中生有）</p><p>　　假设某个赌徒去赌场玩“押大小”（此游戏的胜负概率皆为 50%），连续赢了10次。对于大型赌场，每天来玩的人足够多，那么一段时间之后，总会出现某个赌徒玩“押大小”连续赢10次（甚至更多次）。从概率学的角度讲，这是很普通的。但是对该赌徒而言，如果他陷入了“幸存者偏见”这个误区，他就会企图给这个现象找到一个解释（进行“归因”）。假如此人是个宗教信徒，他/她可能会断言——有神明相助。</p><p>　　这就属于“牵强的归因”——把【随机事件】看作是有其它原因，并企图在随机性之外寻找一个解释。</p><p>3：错误的决策</p><p>　　还以刚才赌徒的例子来说事儿。</p><p>　　假设这个赌徒是宗教信徒，并且误以为自己连续赢10次是神明相助，那么他/她就会获得一种【虚假的信心】，并在这个“虚假信心”的支持下继续玩，甚至还会加大赌注/筹码。最后的结局很可能是——彻底输光。</p><p>　　这就是“幸存者偏见”导致的“错误决策”。</p><p>如果你比较喜欢琢磨，可以把这个赌场的例子替换成天朝的牛市，你会发现其中有某些相通之处。</p><h4 id="如何对付“幸存者偏见”？"><a href="#如何对付“幸存者偏见”？" class="headerlink" title="如何对付“幸存者偏见”？"></a>如何对付“幸存者偏见”？</h4><p>　　在本文的最后部分，大致说一下：如何对付“幸存者偏见”？以下几个步骤，来自于俺粗糙的想法。</p><p>1：意识到“沉默证据”的存在</p><p>　　这是最起码的一点——你首先要能意识到“沉默证据”的存在。</p><p>　　这说起来容易，做起来很难——你需要形成这样一种思维习惯：每当看到“显式的证据”，你都要在内心反问：是否存在与之对应的“隐式证据”？</p><p>2：找到不同类型、不同层次的“沉默证据”</p><p>　　在前一条的基础上，你如果能找到“沉默的证据/隐式的证据”，自然就会获得更全面的认知。</p><p>　　有必要提醒一下：“隐式的证据”有时候不止一种类型。碰到这种情况，不是每个人都能想到所有的类型。</p><p>　　前面提到的“天朝舆论”的例子。那些思考问题不够深入的同学，通常只意识到“网管审查/删贴”导致的“沉默证据”，而忽略了更隐蔽的“沉默证据”——那些连上网条件都没有的人，是无法在网上表达不满的。</p><p>3：尝试排除“随机性”</p><p>　　决定一个样本会成为“隐式样本”or“显式样本”，有两种可能：</p><p>情况A</p><p>至少有一个原因在起作用（比如前面提到“莎草纸的例子”，气候是原因之一）</p><p>情况B</p><p>根本就【没有任何原因】（比如前面提到的“抛硬币的猩猩”），仅仅是随机性决定了某个样本会成为“显式” or “隐式”。对此种情况，如果你非要去找出一个原因，就会出现前面提到的“牵强的归因”。</p><p>　　如果你在分析某个案例时，不清楚属于上述哪一种情况，那么你需要尝试去排除“随机性”。如果无法排除，那么你就只好认可该案例是“随机性”驱动的。</p><p>　　具体该如何排除捏？在本文的最后，咱们重新回到本文开头提到的那篇巴菲特演讲。在说完“猩猩抛硬币”的游戏之后，巴菲特又说了如下一段话。通过这段话，你可以借鉴一下——如何规避“随机因素”的干扰。</p><blockquote><p>然而，我必须说明，前述事例和我即将提出的案例，两者之间存在着若干重大差异。首先，</p></blockquote><blockquote><p>(a)如果你所选择的2.25亿只猩猩的分布状况大致上和美国的人口分布相同；</p></blockquote><blockquote><p>(b)如果经过20天的竞赛，只剩下215只赢家；</p></blockquote><blockquote><p>(c)如果你发现其中有40只猩猩来自于奥马哈的某个动物园，则其中必有蹊跷。</p></blockquote><blockquote><p>于是，你会询问该动物园的猩猩管理员，问此人各种问题。比如给这些猩猩吃什么饲料？这些猩猩是否做某些特殊的运动？是否看了什么书籍？……</p></blockquote><blockquote><p>换言之，如果你发现成功案例有非比寻常的集中现象，则你希望判定此异常的特色是否是成功的原因。</p></blockquote><blockquote><p>科学的调查也遵循此一形态。如果你试图分析某种罕见癌症的原因——例如，美国每年只有1500个病例——而你发现蒙大拿州的某个矿区小镇便产生400个病例，则你必然对当地的饮水、病患的职业或其他种种变数产生兴趣。你知道，在—个小镇中发生400个病例，绝不是随机因素所造成。虽然你未必了解病因，但你知道从哪里着手调查。</p></blockquote><blockquote><p>除了地理，还有其他方式可以界定起源。除了地理的起源，还有我所谓“智力的起源”。我认为各位将会在投资领域中发现——不成比例的抛硬币赢家来自于一个极小的智力村庄．它可以称为“格雷厄姆一多德都市”。这个特殊智力村存在着许多赢家．这种集中现象绝非巧合所能够解释。</p></blockquote><blockquote><p>在某些情况下，即使非比寻常的集中现象也可能不重要。或许有100个只是模仿某一位极具说服力的领导者，而依其主张来猜测硬币的投掷结果。当他猜正面，这100个追随者也会自动地做相同的猜测。如果这一位领导者是属于最后215位赢家之一，则这100也便属于同一个智力起源，这项事实便不具有任何意义，因为100个案例实际上只代表一个案例。同理，假定你生活在一个父权结构极为严密的社会，而美国每一个家庭都恰好以父亲马首是瞻。20天之后，你将发现215位赢家是来自于21.5个家庭。若干天真的分析师可能因此而认为，成功地猜测硬币投掷的结果，其中具有高度的遗传因素。当然，这实际上不具有任何意义，因为你所拥有的不是215个独立的赢家，而只是21.5个随机分布的家庭。</p></blockquote><blockquote><p>我所要考虑的这一群成功投资者，拥有一位共同的智力族长——本杰明·格雷厄姆。但是，这些离开此智力家族的孩童，都是依据非常不同的方法猜测他们自己的“硬币”。他们各自前往不同的地方，买卖不同的股票和企业，但他们的综合绩效绝对无法用随机因素加以解释。他们做相同的猜测，并不是因为领导者下达某一项指令，因此也无法用这种方式解释他们的表现。族长只提供了猜测硬币的智力理论，每位学生都必须自行决定如何运用这项理论……</p></blockquote><p>　　整个演讲很长，限于篇幅，就不全文转述了。</p><p>　　对那些不太了解的同学，再作一下背景介绍：</p><p>　　巴菲特那篇演讲的题目是《格雷厄姆-多德都市的超级投资者们》。“本杰明·格雷厄姆 和 大卫·多德”两人合著了《证券分析》一书（洋文叫“Security Analysis”）。此书被誉为“价值投资领域的圣经”；格雷厄姆本人被誉为“价值投资之父”。</p><p>　　上世纪50年代，巴菲特曾经在哥伦比亚大学选修了格雷厄姆开设的“证券分析课程”，并得了 A+ 的成绩。据传闻：格雷厄姆在哥伦比亚大学开设这门课程22年之后，才首次有学生（巴菲特）得到 A+ 的成绩。</p><p><a href="https://program-think.blogspot.com/2015/05/Survivorship-Bias.html" target="_blank" rel="noopener">原文链接，被墙</a></p>]]></content>
      
      
      <categories>
          
          <category> 思维提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幸存者偏见 </tag>
            
            <tag> 巴菲特演讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT的一些小修小改</title>
      <link href="/posts/7109dccd.html"/>
      <url>/posts/7109dccd.html</url>
      
        <content type="html"><![CDATA[<h3 id="添加博客置顶"><a href="#添加博客置顶" class="headerlink" title="添加博客置顶"></a>添加博客置顶</h3><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h5 id="添加置顶开关"><a href="#添加置顶开关" class="headerlink" title="添加置顶开关"></a>添加置顶开关</h5><p>找到 <u>/blog/scaffolds/post.md</u> 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">top: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后每次新建博客 <code>hexo new&quot;postname&quot;</code> 会显示页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: </span><br><span class="line">top: false</span><br><span class="line">date: </span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>top: false 改成 true 就开启了文章置顶</p><h5 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h5><p>打开 <u>/themes/next/layout/_macro</u> 目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;font color=green&gt;置顶&lt;/font&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>就能在博客页头看到“置顶”标记了。</p><h3 id="修改链接的默认格式"><a href="#修改链接的默认格式" class="headerlink" title="修改链接的默认格式"></a>修改链接的默认格式</h3><p>Hexo的永久链接的默认格式是  <u>:year/:month/:day/:title/</u> 比如访问站点下某一篇文章时，其路径是  <u>2018/04/12/xxxx/</u> 如果我们的文章标题是中文的，那么该路径就会出现中文字符。在路径中出现了中文字符很容易引发各种问题。</p><h5 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h5><p>在站点根目录执行命令：</p><p><code>$ npm install hexo-abbrlink --save</code></p><h5 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><p>打开根目录下的 <u>_config.yml</u> 文件，修改如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line"># permalink_defaults:</span><br><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><p>这里将页面都添加了 .html 的后缀，用来伪装成静态页面(虽说Hexo的页面本身就是静态页面)，这样可以直接从路径就知道这是个静态页面，方便seo。</p><p>接下来重新部署，可以看到文章路径变成了 <u>/posts/xxxxx.html</u> 就算我们将文字标题命名为中文也没问题了。</p><h3 id="添加分享"><a href="#添加分享" class="headerlink" title="添加分享"></a>添加分享</h3><h5 id="安装share插件"><a href="#安装share插件" class="headerlink" title="安装share插件"></a>安装share插件</h5><p><code>$ npm install --save theme-next/hexo-next-share#last-release</code></p><h5 id="添加Need-More-Share-Likely-Share-js"><a href="#添加Need-More-Share-Likely-Share-js" class="headerlink" title="添加Need More Share, Likely, Share.js"></a>添加Need More Share, Likely, Share.js</h5><p>以下任选一种在 <u>themes/_config.yml</u> 里添加即可:</p><p>Need More Share</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># NeedMoreShare2</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-needmoreshare2</span><br><span class="line"># For more information: https://github.com/revir/need-more-share2</span><br><span class="line"># iconStyle: default | box</span><br><span class="line"># boxForm: horizontal | vertical</span><br><span class="line"># position: top / middle / bottom + Left / Center / Right</span><br><span class="line"># networks:</span><br><span class="line"># Weibo | Wechat | Douban | QQZone | Twitter | Facebook | Linkedin | Mailto | Reddit | Delicious | StumbleUpon | Pinterest</span><br><span class="line"># GooglePlus | Tumblr | GoogleBookmarks | Newsvine | Evernote | Friendfeed | Vkontakte | Odnoklassniki | Mailru</span><br><span class="line">needmoreshare:</span><br><span class="line">  enable: true</span><br><span class="line">  cdn:</span><br><span class="line">    js: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.js</span><br><span class="line">    css: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.css</span><br><span class="line">  postbottom:</span><br><span class="line">    enable: true</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: bottomCenter</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span><br><span class="line">  float:</span><br><span class="line">    enable: false</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: middleRight</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span><br></pre></td></tr></table></figure><p>Likely</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Likely Share</span><br><span class="line"># See: https://ilyabirman.net/projects/likely/, https://github.com/ilyabirman/Likely</span><br><span class="line"># Likely supports four looks, nine social networks, any button text.</span><br><span class="line"># You are free to modify the text value and order of any network.</span><br><span class="line">likely:</span><br><span class="line">  enable: true</span><br><span class="line">  cdn:</span><br><span class="line">    js: //cdn.jsdelivr.net/npm/ilyabirman-likely@2/release/likely.min.js</span><br><span class="line">    css: //cdn.jsdelivr.net/npm/ilyabirman-likely@2/release/likely.min.css</span><br><span class="line">  look: normal # available values: normal, light, small, big</span><br><span class="line">  networks:</span><br><span class="line">    twitter: Tweet</span><br><span class="line">    facebook: Share</span><br><span class="line">    linkedin: Link</span><br><span class="line">    gplus: Plus</span><br><span class="line">    vkontakte: Share</span><br><span class="line">    odnoklassniki: Class</span><br><span class="line">    telegram: Send</span><br><span class="line">    whatsapp: Send</span><br><span class="line">    pinterest: Pin</span><br></pre></td></tr></table></figure><p>Share.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># share.js</span><br><span class="line"># See: https://github.com/overtrue/share.js</span><br><span class="line"># networks: weibo,qq,wechat,tencent,douban,qzone,linkedin,diandian,facebook,twitter,google</span><br><span class="line">sharejs:</span><br><span class="line">  enable: true</span><br><span class="line">  cdn:</span><br><span class="line">    js: //cdn.jsdelivr.net/npm/social-share.js@1/dist/js/social-share.min.js</span><br><span class="line">    css: //cdn.jsdelivr.net/npm/social-share.js@1/dist/js/social-share.min.css</span><br><span class="line">  networks: weibo,qq,wechat,tencent,douban,qzone,linkedin,diandian,facebook,twitter,google</span><br><span class="line">  wechat_qrcode:</span><br><span class="line">    title: share.title</span><br><span class="line">    prompt: share.prompt</span><br></pre></td></tr></table></figure><p>– END –</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SSH密钥进行Git协议传输</title>
      <link href="/posts/3a0aec94.html"/>
      <url>/posts/3a0aec94.html</url>
      
        <content type="html"><![CDATA[<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的用户都会提供一个公钥用于授权，没有的话可以生成一个，生成公钥的过程在所有操作系统上都差不多。</p><p>首先，你要确认一下本机是否已经有一个公钥。</p><p>SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录，进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh &amp;&amp; ls</span><br><span class="line"></span><br><span class="line">id_rsa    id_rsa.pub    known_hosts</span><br></pre></td></tr></table></figure><a id="more"></a><p>看一下有没有id_rsa和id_rsa.pub，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。</p><p>假如没有这些文件，甚至连 .ssh 目录都没有，可以用 ssh-keygen 来创建。</p><p><code>$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code></p><p><u><a href="mailto:your_email@youremail.com" target="_blank" rel="noopener">your_email@youremail.com</a></u> 是你的邮箱，然后一路Enter,完了之后，大概是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in /home/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com</span><br></pre></td></tr></table></figure><h3 id="添加公钥到你的远程仓库"><a href="#添加公钥到你的远程仓库" class="headerlink" title="添加公钥到你的远程仓库"></a>添加公钥到你的远程仓库</h3><p>1、查看你生成的公钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0X6L1zLL4VHuvGb8aJH3ippTozmReSUzgntvk434aJ/v7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8vR3c8E7CjZN733f5AL8uEYJA+YZevY5UCvEg+umT7PHghKYaJwaCxV7sjYP7Z6V79OMCEAGDNXC26IBMdMgOluQjp6o6j2KAdtRBdCDS/QIU5THQDxJ9lBXjk1fiq9tITo/aXBvjZeD+gH/Apkh/0GbO8VQLiYYmNfqqAHHeXdltORn8N7C9lOa/UW3KM7QdXo6J0GFlBVQeTE/IGqhMS5PMln3 uemail@email.com</span><br></pre></td></tr></table></figure><p>2、登陆你的github帐户。点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key</p><p>3、然后复制上面的公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字。</p><p>4、点击 Add key。</p><p>完成以后，验证下这个key是不是正常工作：</p><p><code>$ ssh -T git@github.com</code></p><p>如果，看到：</p><p><code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not # provide shell access.</code></p><p>恭喜你，你的设置已经成功了。</p><h3 id="修改git的remote-url"><a href="#修改git的remote-url" class="headerlink" title="修改git的remote url"></a>修改git的remote url</h3><p>使用命令 <u>git remote -v</u> 查看你当前的 <u>remote url</u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/uname/project.git (fetch)</span><br><span class="line">origin https://github.com/uname/project.git (push)</span><br></pre></td></tr></table></figure><p>如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议）</p><p>登陆你的github，打开project，点击Clone or download，你在上面可以看到你的ssh协议相应的url，类似：</p><p><code>git@github.com:uname/project.git</code></p><p>复制此ssh链接，然后使用命令 <u>git remote set-url</u> 来调整你的url。</p><p><code>$ git remote set-url origin git@github.com:uname/project.git</code></p><p>然后，你可以再用命令 <u>git remote -v</u> 查看一下，url是否已经变成了ssh地址。</p><p>最后,使用git fetch, git pull , git push，就再也不用输入密码了。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo页面静态压缩</title>
      <link href="/posts/96ad42a5.html"/>
      <url>/posts/96ad42a5.html</url>
      
        <content type="html"><![CDATA[<p>利用gulp对hexo静态页面进行压缩，提升网页加载速度。</p><h4 id="全局和目录安装gulp"><a href="#全局和目录安装gulp" class="headerlink" title="全局和目录安装gulp"></a>全局和目录安装gulp</h4><p><code>$ npm install gulp -g</code>  //全局安装</p><p><code>$ npm install gulp --save</code>  //站点目录下安装</p><p><code>$ gulp -v</code>  //查看版本</p><h4 id="安装gulp插件"><a href="#安装gulp插件" class="headerlink" title="安装gulp插件"></a>安装gulp插件</h4><a id="more"></a><p>在站点根目录下安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp-minify-css --save</span><br><span class="line">$ npm install gulp-uglify --save</span><br><span class="line">$ npm install gulp-htmlmin --save</span><br><span class="line">$ npm install gulp-htmlclean --save</span><br><span class="line">$ npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure><h4 id="创建gulpfile-js文件"><a href="#创建gulpfile-js文件" class="headerlink" title="创建gulpfile.js文件"></a>创建gulpfile.js文件</h4><p>在 Hexo 站点下新建gulpfile.js文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">var imagemin = require(&apos;gulp-imagemin&apos;);</span><br><span class="line">var babel = require(&apos;gulp-babel&apos;);</span><br><span class="line"></span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function (done) &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 压缩html文件</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function (done) &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: true,</span><br><span class="line">            minifyJS: true,</span><br><span class="line">            minifyCSS: true,</span><br><span class="line">            minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function (done) &#123;</span><br><span class="line">    return gulp.src([&apos;./public/**/*.js&apos;, &apos;!./public/**/*.min.js&apos;])</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            //将ES6代码转译为可执行的JS代码</span><br><span class="line">            presets: [&apos;es2015&apos;] // es5检查机制</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 压缩 public/images 目录内图片(Version&lt;3)</span><br><span class="line">// gulp.task(&apos;minify-images&apos;, function () &#123;</span><br><span class="line">//     gulp.src(&apos;./public/images/**/*.*&apos;)</span><br><span class="line">//         .pipe(imagemin(&#123;</span><br><span class="line">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">//         &#125;))</span><br><span class="line">//         .pipe(gulp.dest(&apos;./public/images&apos;));</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">// 压缩 public/images 目录内图片(Version&gt;3)</span><br><span class="line">gulp.task(&apos;minify-images&apos;, function (done) &#123;</span><br><span class="line">    gulp.src(&apos;./public/images/**/*.*&apos;)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">            imagemin.gifsicle(&#123;interlaced: true&#125;),</span><br><span class="line">            imagemin.jpegtran(&#123;progressive: true&#125;),</span><br><span class="line">            imagemin.optipng(&#123;optimizationLevel: 5&#125;),</span><br><span class="line">            imagemin.svgo(&#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    &#123;removeViewBox: true&#125;,</span><br><span class="line">                    &#123;cleanupIDs: false&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public/images&apos;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//4.0以前的写法 </span><br><span class="line">//gulp.task(&apos;default&apos;, [</span><br><span class="line">//  &apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, &apos;minify-images&apos;</span><br><span class="line">//]);</span><br><span class="line">//4.0以后的写法</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&apos;default&apos;, gulp.series(gulp.parallel(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, &apos;minify-images&apos;)), function () &#123;</span><br><span class="line">    console.log(&quot;----------gulp Finished----------&quot;);</span><br><span class="line">    // Do something after a, b, and c are finished.</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="gulp-babel-取消严格模式"><a href="#gulp-babel-取消严格模式" class="headerlink" title="gulp-babel 取消严格模式"></a>gulp-babel 取消严格模式</h4><p>首先创建.babelrc文件</p><p>在 Hexo 站点下新建.babelrc文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &apos;presets&apos;: [&apos;es2015&apos;],</span><br><span class="line">    &quot;plugins&quot;: [&quot;transform-remove-strict-mode&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 gulp-babel 取消严格模式(“use strict”)命令：</p><p><code>$ npm install babel-plugin-transform-remove-strict-mode --save</code></p><h4 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h4><p>只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ gulp</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>问题1：如果安装gulp-imagemin错误请执行以下命令：</p><p><code>$ npm i gulp-imagemin --unsafe-perms</code></p><p>问题2: gulp 遇到 no gulpfile found</p><p><code>$ npm install gulp -g</code>  //重新全局安装一下gulp，注意gulp一定要先安装全局版本，再安装目录内版本，最好能保持两版本号一致</p><p><code>uname/blog/gulpfile.js</code>  //确定gulpfile.js文件是在hexo目录下</p><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gulp clean</span><br><span class="line">$ gulp</span><br></pre></td></tr></table></figure><p>– END –</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> gulp </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下搭建Hexo个人博客</title>
      <link href="/posts/a73fc4c5.html"/>
      <url>/posts/a73fc4c5.html</url>
      
        <content type="html"><![CDATA[<p>本博基于 <u>ubuntu18.04+git v2.17.1+NodeJS v8.10.0+hexo-cli: 2.0.0</u> 不同平台和版本实际操作可能略不同。</p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p><code>$ apt install git</code></p><h5 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h5><p><code>$ apt install npm</code></p><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p><code>$ apt install node.js</code></p><a id="more"></a><h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><p>1：安装hexo</p><p><code>$ npm install -g hexo</code></p><p>2：执行init命令初始化hexo,生成blog文件，就是你的博客根目录，所有的操作都在里面进行。</p><p><code>$ hexo init blog</code></p><p>3：生成静态网页</p><p><code>cd blog</code><br><code>$ hexo g</code></p><p>4：启动本地服务，进行文章预览调试</p><p><code>$ hexo server</code></p><p>浏览器输入 <u><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></u></p><h4 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h4><p>1：建立Repository</p><p>2：建立与你用户名对应的仓库，仓库名必须为 <u>yourname.github.io</u> ，固定写法</p><p>3：建立关联 <code>vi /users/blog/_config.yml</code></p><p>翻到最下面，改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">    type: git </span><br><span class="line">    repository: https://github.com/yourname/yourname.github.io.git </span><br><span class="line">    #repository: git@github.com:yourname/yourname.github.io.git    //此是针对ssh密钥用户</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>4：执行命令：<code>$ npm install --save hexo-deployer-git</code></p><p>5：然后，执行配置命令：<code>$ hexo deploy</code><br>在浏览器中输入 <u><a href="http://yourname.github.io/" target="_blank" rel="noopener">http://yourname.github.io/</a></u></p><p>6：每次部署命令:</p><p><code>cd blog</code></p><p><code>$ hexo g -d</code></p><h4 id="配置自己的域名"><a href="#配置自己的域名" class="headerlink" title="配置自己的域名"></a>配置自己的域名</h4><p>1： 首先设置域名DNS解析，Type 改成 CNAME, Target 填上 yourname.github.io, 保存</p><p>2： 在 source 下创建一个名为 CNAME 的文件，内容为你要使用的域名，如本博客为 <a href="http://www.12ab.cf">www.12ab.cf</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog/source</span><br><span class="line">echo &quot;www.12ab.cf&quot; &gt; CNAME</span><br></pre></td></tr></table></figure><p>3: 编辑 _config.yml，使 url 的内容为你的主页地址，如本博客为 <u><a href="https://www.12ab.cf">https://www.12ab.cf</a></u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /users/blog/_config.yml</span><br><span class="line"></span><br><span class="line">url: https://www.12ab.cf</span><br></pre></td></tr></table></figure><p>4: 部署到 git 后，进入 github，打开网站所在项目，点击 Settings/GitHub Pages ,勾选 Enforce HTTPS</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>hexo new&quot;postname&quot;</code> 新建文章</p><p><code>hexo new page&quot;pagename&quot;</code> 新建页面</p><p><code>hexo clean</code> 清理缓存</p><p><code>hexo generate</code> 生成静态页面</p><p><code>hexo server</code> 开启预览访问端口</p><p><code>hexo deploy</code> 将.deploy目录部署到GitHub</p><p>博客文章在 <u>/blog/source/_posts</u> 文章支持Markdown语法。如果想修改头像可以直接在主题的 <u>_config.yml</u> 文件里面修改，友情链接，之类的都在这里。</p><p>上面的是Linux搭建方法，相信大家用Windows的比较多。推荐朋友的<a href="https://blog.cat73.org/20160608/2016060801.github-hexo/" target="_blank" rel="noopener">Windows搭建教程</a></p><p>– END –</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> hexo </tag>
            
            <tag> next </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
