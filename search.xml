<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>GitHub Pages上的301重定向</title>
      <link href="/posts/8c0a6bf2.html"/>
      <url>/posts/8c0a6bf2.html</url>
      
        <content type="html"><![CDATA[<p>记录 GitHub Pages 上301重定向踩过的坑。</p><p>其实俺的要求很简单，12ab.cf 能定向跳转到 <a href="http://www.12ab.cf">www.12ab.cf</a> .</p><p>本来是 CNAME 解析到 github.io ,一切都是那么顺利，新的域名也能打开，解析速度俺也能接受。</p><p>想想，好歹做个A记录吧，于是 prefix 留空， GitHub IP 填上，确定。显示错误 usename 不能留空，能理解，能理解，填上 @ 继续，还是显示错误，能理解，每个 DNS 网站的表达方式不同嘛。</p><a id="more"></a><p>继续，填上 * 小星星一颗，错误。可能是俺的表达方式太害羞了，于是直白一点， 填上 NOPREFIX ，结果是接受了。兴冲冲地去打开 12ab.cf 检验一下，打不开，也不能跳转。</p><p>于是俺迷茫了！</p><p>是不是 GitHub Pages 不能支持301跳转？</p><p>要不干脆整两个仓库，直接写个js， 404.html 跳转？</p><p>是不是 freenom 不支持 A 记录跳转？换 CNAME 记录试试？</p><p>要不要换个DNS解析网站？</p><p>要不干脆整个小VPS？</p><p>搭上梯子（还好这门手艺没落下）打开 freenom ，没道理前缀不能留空呀？于是，小手一抖填上一个点 . 选择 A 记录，填上 GitHub 的 IP ，确定，退出。<br>几分钟后，打开浏览器，站长工具 http 状态查询，返回码301，居然就这样跳转了。</p><p>总结一下，GitHub Pages 是支持301重定向的，但是仅限单个域名，如果换域名的话还是比较麻烦的! 虽然现在也支持了Let’s Encrypt 加密，但是速度还是不适合建站。</p><p>freenom 的 DNS 解析，主要是还没找到一个国外合适的 DNS 解析，国内的暂不考虑，再就是，又不是不能用！</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> github pages </tag>
            
            <tag> dns </tag>
            
            <tag> 水 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>幸存者偏见，附巴菲特著名演讲</title>
      <link href="/posts/ef540c36.html"/>
      <url>/posts/ef540c36.html</url>
      
        <content type="html"><![CDATA[<p>文 | 编程随想</p><h4 id="何为“幸存者偏见”？"><a href="#何为“幸存者偏见”？" class="headerlink" title="何为“幸存者偏见”？"></a>何为“幸存者偏见”？</h4><p>　　“幸存者偏见”，洋文写作“survivorship bias”或“survival bias”。这玩意儿属于“认知偏差”的一种。</p><p>　　如果用一句通俗的话来概括“幸存者偏见”，就是【死人没法开口】。如果要说得更具体点，那就是：<br>当你在分析某个事物的时候，可能会面对诸多的证据（样本）。但是大多数人通常只注意到【显式】的样本和证据，而忽略了【隐式】的样本和证据。从而得出错误的认知、错误的结论。</p><p>　　为了更形象一些，俺来说一下“幸存者偏见”的出处——古罗马的西赛罗（与凯撒同时代的知名政治家、文学家、演说家）讲过一个故事，大意如下：</p><p>有一群宗教信徒在某次沉船事故中幸存。幸存后捏，他们就找人作画（画面上是一群人在事故中祈祷），以此来宣扬说：因为他们作了虔诚的祷告，所以才在沉船事故中幸存。</p><p>某信徒拿了这幅画给一个无神论者看。这个无神论者直接反问道：那些祈祷之后淹死的人，他们的画像在哪里？</p><p>　　以上就是“幸存者偏见”的出处。那些“祈祷之后依然淹死的人”，他们已经死了，不可能再去告诉别人，他们的祈祷失灵了。</p><a id="more"></a><h4 id="不同领域中的“幸存者偏见”"><a href="#不同领域中的“幸存者偏见”" class="headerlink" title="不同领域中的“幸存者偏见”"></a>不同领域中的“幸存者偏见”</h4><p>　　西赛罗的那个故事，属于宗教领域的“幸存者偏见”。除了宗教领域，还有很多领域（甚至可以说，所有的领域）都会存在这类偏见。下面，俺挑选几个领域来举例。</p><p>1：IT 领域——创业的“银弹”</p><p>　　作为 IT 从业人员，俺经常在某些 IT 网站上看到某某公司的创业事迹。如果你也跟俺一样，估计这方面的故事也看了不少。</p><p>　　不知你有没有发现，那些广为流传的创业案例，都是【成功】案例。越成功的，越具有传奇色彩，被宣传的次数就越多（比如乔布斯、盖茨）。相反，那些创业【失败】的案例，（相比而言）被提及的次数非常非常少。</p><p>　　这会产生啥问题捏？</p><p>　　假设某个有志青年想要创业，他看了很多创业成功的案例，这些案例都提到某些共同的因素。于是捏，此人就误以为这些共同的因素是“银弹”——只要具备这些银弹，创业必定成功。这就如同西赛罗的那个故事——只看到存活的祈祷者，就误以为“祈祷”是存活的【充分条件】。</p><p>2：成功学领域——虚假的“充分条件”</p><p>　　说完“创业”，很自然就联想到“成功学”。那些鼓吹“成功学”的文章/书籍，通常存在很多谬误，其中一个谬误是——号称“某某方法论”是成功的【充分条件】。换句话说，只要具备了该方法论，就一定可以获得成功。</p><p>　　为啥俺说这是一个谬误捏？因为这些鼓吹成功学的文章/书籍，通常都【没有】去检验：该方法论是否也出现在失败者身上。只要有一个失败者也采用了该方法论，就足以说明——这个方法论【不是】成功的充分条件。</p><p>　　比如说，很多成功学的理论提到了“勤奋”是成功的充分条件。但其实捏，勤奋而没有成功的，大有人在。</p><p>3：投资领域——仅凭运气的“股神”</p><p>　　最近半年，天朝股市迎来新一轮的牛市行情。前几天有读者建议俺聊聊股市的话题，所以今天顺便拿投资领域来说事儿。</p><p>　　似乎在每一个国家的股市中，都有那么几个人被誉为“股神”。如果碰到牛市，被冠以“股神”的人还会再多出好几倍。</p><p>　　（暂且【不】考虑“弄虚作假、谎报战绩”的情况）假设这些获得股神称号的人，都在实际操作过程中获得远高于大盘的收益率，他们有资格获得“股神”的称号吗？</p><p> 为了说明这个例子，俺转载某篇文章的其中一段（此文写于1984年）。</p><blockquote><p>我要各位设想—场全国性的抛硬币大赛。让我们假定，全美国2.25亿人，在明天早晨起床时都掷一枚硬币，并猜硬币出现的正面或反面。如果猜对了，他们将从猜错者的手中赢得一美元。而猜错的人则被淘汰。</p></blockquote><blockquote><p>每天都有输家遭到淘汰，奖金则不断地累积。经过十个早晨的十次投掷之后，全美国约有22万人连续十次猜对抛硬币的结果。每人所赢得的资金约1000多美元。</p></blockquote><blockquote><p>现在，这群人可能会开始炫耀自己的战绩，此乃人的天性使然。即使他们仍保持谦虚的态度，但在鸡尾酒会中，他们偶尔会以此技巧吸引异性的注意，并炫耀他们对抛硬币的奇特洞察力。</p></blockquote><blockquote><p>游戏继续进行，再经过十天，约有215个人连续20次猜对抛硬币的结果，并且每个人赢得大约100万美元的奖金。输家总共付出2.25亿美元，赢家则得到2.25亿美元。</p></blockquote><blockquote><p>这时候，这群赢家会完全沉迷在自己的成就中——他们可能开始著书立说：“我如何每天早晨工作30秒，并在20天之内将—美元变成100万美元。”更糟的是，他们会在全国各地主办培训班，宣传如何有效地抛硬币。</p></blockquote><blockquote><p>对那些持怀疑态度的学者，他们会反驳说：“如果你认为这是不可能的，该如何解释，为什么会有我们这215个人呢？”</p></blockquote><blockquote><p>但是，某些商学院的教授可能会粗鲁地指出—个事实——假如让2.25亿只猩猩参加这场比赛，结果大致上也是如此——会有215只猩猩连续赢得20次的投掷。</p></blockquote><p>　　大伙儿知道这篇文章的作者是谁吗？作者就是被誉为“股神”的巴菲特。（1984年，为了纪念《证券分析》出版50周年，哥伦比亚大学搞了一次隆重的纪念活动，邀请到巴菲特作主题演讲。这篇文章就是当年的演讲稿）</p><p>　　大伙儿可能会觉得奇怪——难道巴菲特想要说明：“自己是运气好的猩猩”？</p><p>　　当然不是啦。在那篇演讲的后续部分，巴菲特分析了——为啥他本人【不是】运气好的猩猩。在本文的结尾部分，俺还会再次提到这个演讲，以及巴菲特对“幸存者偏见”的分析。</p><p>　　虽然巴菲特不是“运气好的猩猩”，但俺敢肯定，在咱们天朝，某些所谓的“炒股高手”，只不过是“运气好的猩猩” :)</p><p>4：政治领域——天朝貌似和谐的舆论</p><p>　　本来这篇是专门谈“思维和心理学”，不涉及政治的。但是俺还是忍不住要来抹黑一下咱们的朝廷 :)</p><p>　　俺的大部分读者，都生活在天朝之内。如果你也是，应该很清楚一点——天朝的主流媒体（电视、报刊、杂志、墙内网站），都是比较和谐的。在国内的主流媒体上，你看不到“对国家领导人的批评”，也看不到“对政府的批评”。</p><p>　　如果你根据“国内主流媒体的一片和谐”，来推论“国内民意也是一片和谐”，那你就陷入了“幸存者偏见”。</p><p>　　在这个例子中，存在两种“沉默的样本”:</p><p>其一，<br>有些人在墙内的网站上发表了不和谐的言论，但是很快就被网站的网管给删除了。删除之后，别人自然就看不到了——这就变成了“沉默的样本”；</p><p>其二，<br>在天朝，有些人虽然对现实很不满，但是他们的生活条件太差了，以至于都不具备上网的条件（比如说，连网吧的钱都付不起）。所以，他们不可能在网络上发出自己的声音。</p><p>5：历史领域——莎草纸的误导</p><p>　　历史这个领域，简直可以说是“幸存者偏见”的重灾区。因为历史研究的是“过去发生的事情”。如果“过去的事情”距离现在比较遥远，很多相关的东西可能已经被时间消磨殆尽——沦为沉默的证据。</p><p>　　下面，俺以“莎草纸”来说明“幸存者偏见”的误导性。</p><p>　　在地中海周边的古代文明（古埃及、腓尼基、古希腊、古罗马）都曾经使用莎草纸作为书写文字的载体。在保存至今的文物中，埃及的莎草纸文物比另外那三个地方要多。于是就很容易给人一种误解——似乎莎草纸在埃及用的比较广泛，而在另外三个地方使用不够广泛。但真实的原因是——莎草纸在潮湿环境中非常容易发霉腐烂，而埃及的气候比较干燥，于是保存下来的就比较多。</p><p>　　另一个例子是：曾经有一种学术观点认为腓尼基民族是“只擅长于经商而缺乏文艺细胞”。因为腓尼基留存至今的【少量】莎草纸都跟经商有关，并没有发现跟文学艺术相关的莎草纸文物。</p><p>　　真的是这样吗？</p><p>　　俺个人认为，更大的可能性是：腓尼基人也有自己的文学艺术并且也保存在莎草纸上。但是那些腓尼基城市的气候非常不利于保存莎草纸，于是当地的莎草纸文物都腐烂了。至于少量涉及经商的莎草纸文件能保存至今，有可能是被经商船队带到其它地区（比如埃及这种干燥的地区），从而在其它地区保存了下来。</p><p>6：其它领域</p><p>　　在前面俺说了，几乎所有的领域，都可以看到“幸存者偏见”。限于篇幅，俺只列举前面这几个。对这个话题有兴趣的同学，可以在评论中补充。</p><h4 id="“幸存者偏见”导致的问题"><a href="#“幸存者偏见”导致的问题" class="headerlink" title="“幸存者偏见”导致的问题"></a>“幸存者偏见”导致的问题</h4><p>　　接下来，俺总结一下“幸存者偏见”可能导致的问题——分三个方面。</p><p>1：错误的认知</p><p>　　这个最好理解了——由于“错误的认知”会导致你对“沉默证据”的忽视，所以你对该领域的认知是不完全的。</p><p>2：错误的归因</p><p>　　在【只看到】“显式样本”的情况下，你可能会产生一些错误的归因。“幸存者偏见”导致的“错误归因”会有很多种。俺这里仅举几个例子。</p><p>　　因果倒置</p><p>　　想必大伙儿都看过举重比赛。对于举重运动员，很多人都有一个错误的观点——以为这些运动员是在练习举重之后，才导致身材变得矮壮。</p><p>　　但实际上捏，举重队在一开始筛选运动员的时候，就把那些身材细长的忽略掉了（这些身材细长的候选人，就是“沉默的样本”）。</p><p>　　换句话说，是因为他们身材矮壮，才有可能被选中去参加举重培训，而不是因为参加举重培训导致身材如此——这就是【因果倒置】.</p><p>　　牵强的归因（无中生有）</p><p>　　假设某个赌徒去赌场玩“押大小”（此游戏的胜负概率皆为 50%），连续赢了10次。对于大型赌场，每天来玩的人足够多，那么一段时间之后，总会出现某个赌徒玩“押大小”连续赢10次（甚至更多次）。从概率学的角度讲，这是很普通的。但是对该赌徒而言，如果他陷入了“幸存者偏见”这个误区，他就会企图给这个现象找到一个解释（进行“归因”）。假如此人是个宗教信徒，他/她可能会断言——有神明相助。</p><p>　　这就属于“牵强的归因”——把【随机事件】看作是有其它原因，并企图在随机性之外寻找一个解释。</p><p>3：错误的决策</p><p>　　还以刚才赌徒的例子来说事儿。</p><p>　　假设这个赌徒是宗教信徒，并且误以为自己连续赢10次是神明相助，那么他/她就会获得一种【虚假的信心】，并在这个“虚假信心”的支持下继续玩，甚至还会加大赌注/筹码。最后的结局很可能是——彻底输光。</p><p>　　这就是“幸存者偏见”导致的“错误决策”。</p><p>如果你比较喜欢琢磨，可以把这个赌场的例子替换成天朝的牛市，你会发现其中有某些相通之处。</p><h4 id="如何对付“幸存者偏见”？"><a href="#如何对付“幸存者偏见”？" class="headerlink" title="如何对付“幸存者偏见”？"></a>如何对付“幸存者偏见”？</h4><p>　　在本文的最后部分，大致说一下：如何对付“幸存者偏见”？以下几个步骤，来自于俺粗糙的想法。</p><p>1：意识到“沉默证据”的存在</p><p>　　这是最起码的一点——你首先要能意识到“沉默证据”的存在。</p><p>　　这说起来容易，做起来很难——你需要形成这样一种思维习惯：每当看到“显式的证据”，你都要在内心反问：是否存在与之对应的“隐式证据”？</p><p>2：找到不同类型、不同层次的“沉默证据”</p><p>　　在前一条的基础上，你如果能找到“沉默的证据/隐式的证据”，自然就会获得更全面的认知。</p><p>　　有必要提醒一下：“隐式的证据”有时候不止一种类型。碰到这种情况，不是每个人都能想到所有的类型。</p><p>　　前面提到的“天朝舆论”的例子。那些思考问题不够深入的同学，通常只意识到“网管审查/删贴”导致的“沉默证据”，而忽略了更隐蔽的“沉默证据”——那些连上网条件都没有的人，是无法在网上表达不满的。</p><p>3：尝试排除“随机性”</p><p>　　决定一个样本会成为“隐式样本”or“显式样本”，有两种可能：</p><p>情况A</p><p>至少有一个原因在起作用（比如前面提到“莎草纸的例子”，气候是原因之一）</p><p>情况B</p><p>根本就【没有任何原因】（比如前面提到的“抛硬币的猩猩”），仅仅是随机性决定了某个样本会成为“显式” or “隐式”。对此种情况，如果你非要去找出一个原因，就会出现前面提到的“牵强的归因”。</p><p>　　如果你在分析某个案例时，不清楚属于上述哪一种情况，那么你需要尝试去排除“随机性”。如果无法排除，那么你就只好认可该案例是“随机性”驱动的。</p><p>　　具体该如何排除捏？在本文的最后，咱们重新回到本文开头提到的那篇巴菲特演讲。在说完“猩猩抛硬币”的游戏之后，巴菲特又说了如下一段话。通过这段话，你可以借鉴一下——如何规避“随机因素”的干扰。</p><blockquote><p>然而，我必须说明，前述事例和我即将提出的案例，两者之间存在着若干重大差异。首先，</p></blockquote><blockquote><p>(a)如果你所选择的2.25亿只猩猩的分布状况大致上和美国的人口分布相同；</p></blockquote><blockquote><p>(b)如果经过20天的竞赛，只剩下215只赢家；</p></blockquote><blockquote><p>(c)如果你发现其中有40只猩猩来自于奥马哈的某个动物园，则其中必有蹊跷。</p></blockquote><blockquote><p>于是，你会询问该动物园的猩猩管理员，问此人各种问题。比如给这些猩猩吃什么饲料？这些猩猩是否做某些特殊的运动？是否看了什么书籍？……</p></blockquote><blockquote><p>换言之，如果你发现成功案例有非比寻常的集中现象，则你希望判定此异常的特色是否是成功的原因。</p></blockquote><blockquote><p>科学的调查也遵循此一形态。如果你试图分析某种罕见癌症的原因——例如，美国每年只有1500个病例——而你发现蒙大拿州的某个矿区小镇便产生400个病例，则你必然对当地的饮水、病患的职业或其他种种变数产生兴趣。你知道，在—个小镇中发生400个病例，绝不是随机因素所造成。虽然你未必了解病因，但你知道从哪里着手调查。</p></blockquote><blockquote><p>除了地理，还有其他方式可以界定起源。除了地理的起源，还有我所谓“智力的起源”。我认为各位将会在投资领域中发现——不成比例的抛硬币赢家来自于一个极小的智力村庄．它可以称为“格雷厄姆一多德都市”。这个特殊智力村存在着许多赢家．这种集中现象绝非巧合所能够解释。</p></blockquote><blockquote><p>在某些情况下，即使非比寻常的集中现象也可能不重要。或许有100个只是模仿某一位极具说服力的领导者，而依其主张来猜测硬币的投掷结果。当他猜正面，这100个追随者也会自动地做相同的猜测。如果这一位领导者是属于最后215位赢家之一，则这100也便属于同一个智力起源，这项事实便不具有任何意义，因为100个案例实际上只代表一个案例。同理，假定你生活在一个父权结构极为严密的社会，而美国每一个家庭都恰好以父亲马首是瞻。20天之后，你将发现215位赢家是来自于21.5个家庭。若干天真的分析师可能因此而认为，成功地猜测硬币投掷的结果，其中具有高度的遗传因素。当然，这实际上不具有任何意义，因为你所拥有的不是215个独立的赢家，而只是21.5个随机分布的家庭。</p></blockquote><blockquote><p>我所要考虑的这一群成功投资者，拥有一位共同的智力族长——本杰明·格雷厄姆。但是，这些离开此智力家族的孩童，都是依据非常不同的方法猜测他们自己的“硬币”。他们各自前往不同的地方，买卖不同的股票和企业，但他们的综合绩效绝对无法用随机因素加以解释。他们做相同的猜测，并不是因为领导者下达某一项指令，因此也无法用这种方式解释他们的表现。族长只提供了猜测硬币的智力理论，每位学生都必须自行决定如何运用这项理论……</p></blockquote><p>　　整个演讲很长，限于篇幅，就不全文转述了。</p><p>　　对那些不太了解的同学，再作一下背景介绍：</p><p>　　巴菲特那篇演讲的题目是《格雷厄姆-多德都市的超级投资者们》。“本杰明·格雷厄姆 和 大卫·多德”两人合著了《证券分析》一书（洋文叫“Security Analysis”）。此书被誉为“价值投资领域的圣经”；格雷厄姆本人被誉为“价值投资之父”。</p><p>　　上世纪50年代，巴菲特曾经在哥伦比亚大学选修了格雷厄姆开设的“证券分析课程”，并得了 A+ 的成绩。据传闻：格雷厄姆在哥伦比亚大学开设这门课程22年之后，才首次有学生（巴菲特）得到 A+ 的成绩。</p>]]></content>
      
      
      <categories>
          
          <category> 思维提升 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 幸存者偏见 </tag>
            
            <tag> 巴菲特演讲 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>NexT的一些小修小改</title>
      <link href="/posts/7109dccd.html"/>
      <url>/posts/7109dccd.html</url>
      
        <content type="html"><![CDATA[<h3 id="添加博客置顶"><a href="#添加博客置顶" class="headerlink" title="添加博客置顶"></a>添加博客置顶</h3><h5 id="安装插件"><a href="#安装插件" class="headerlink" title="安装插件"></a>安装插件</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ npm uninstall hexo-generator-index --save</span><br><span class="line">$ npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure><h5 id="添加置顶开关"><a href="#添加置顶开关" class="headerlink" title="添加置顶开关"></a>添加置顶开关</h5><p>找到 <u>/blog/scaffolds/post.md</u> 添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">top: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><a id="more"></a><p>然后每次新建博客 <code>hexo new&quot;postname&quot;</code> 会显示页面</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: </span><br><span class="line">top: false</span><br><span class="line">date: </span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>top: false 改成 true 就开启了文章置顶</p><h5 id="设置置顶标志"><a href="#设置置顶标志" class="headerlink" title="设置置顶标志"></a>设置置顶标志</h5><p>打开 <u>/themes/next/layout/_macro</u> 目录下的post.swig文件，定位到<code>&lt;div class=&quot;post-meta&quot;&gt;</code>标签下，插入如下代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% if post.top %&#125;</span><br><span class="line">    &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt;</span><br><span class="line">    &lt;font color=green&gt;置顶&lt;/font&gt;</span><br><span class="line">    &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;</span><br><span class="line">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure><p>就能在博客页头看到“置顶”标记了。</p><h3 id="修改链接的默认格式"><a href="#修改链接的默认格式" class="headerlink" title="修改链接的默认格式"></a>修改链接的默认格式</h3><p>Hexo的永久链接的默认格式是  <u>:year/:month/:day/:title/</u> 比如访问站点下某一篇文章时，其路径是  <u>2018/04/12/xxxx/</u> 如果我们的文章标题是中文的，那么该路径就会出现中文字符。在路径中出现了中文字符很容易引发各种问题。</p><h5 id="安装插件-1"><a href="#安装插件-1" class="headerlink" title="安装插件"></a>安装插件</h5><p>在站点根目录执行命令：</p><p><code>$ npm install hexo-abbrlink --save</code></p><h5 id="修改站点配置文件"><a href="#修改站点配置文件" class="headerlink" title="修改站点配置文件"></a>修改站点配置文件</h5><p>打开根目录下的 <u>_config.yml</u> 文件，修改如下配置：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># permalink: :year/:month/:day/:title/</span><br><span class="line"># permalink_defaults:</span><br><span class="line">permalink: posts/:abbrlink.html</span><br><span class="line">abbrlink:</span><br><span class="line">  alg: crc32  # 算法：crc16(default) and crc32</span><br><span class="line">  rep: hex    # 进制：dec(default) and hex</span><br></pre></td></tr></table></figure><p>这里将页面都添加了 .html 的后缀，用来伪装成静态页面(虽说Hexo的页面本身就是静态页面)，这样可以直接从路径就知道这是个静态页面，方便seo。</p><p>接下来重新部署，可以看到文章路径变成了 <u>/posts/xxxxx.html</u> 就算我们将文字标题命名为中文也没问题了。</p><h3 id="添加分享"><a href="#添加分享" class="headerlink" title="添加分享"></a>添加分享</h3><h5 id="安装share插件"><a href="#安装share插件" class="headerlink" title="安装share插件"></a>安装share插件</h5><p><code>$ npm install --save theme-next/hexo-next-share#last-release</code></p><h5 id="添加Need-More-Share-Likely-Share-js"><a href="#添加Need-More-Share-Likely-Share-js" class="headerlink" title="添加Need More Share, Likely, Share.js"></a>添加Need More Share, Likely, Share.js</h5><p>以下任选一种在 <u>themes/_config.yml</u> 里添加即可:</p><p>Need More Share</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># NeedMoreShare2</span><br><span class="line"># Dependencies: https://github.com/theme-next/theme-next-needmoreshare2</span><br><span class="line"># For more information: https://github.com/revir/need-more-share2</span><br><span class="line"># iconStyle: default | box</span><br><span class="line"># boxForm: horizontal | vertical</span><br><span class="line"># position: top / middle / bottom + Left / Center / Right</span><br><span class="line"># networks:</span><br><span class="line"># Weibo | Wechat | Douban | QQZone | Twitter | Facebook | Linkedin | Mailto | Reddit | Delicious | StumbleUpon | Pinterest</span><br><span class="line"># GooglePlus | Tumblr | GoogleBookmarks | Newsvine | Evernote | Friendfeed | Vkontakte | Odnoklassniki | Mailru</span><br><span class="line">needmoreshare:</span><br><span class="line">  enable: true</span><br><span class="line">  cdn:</span><br><span class="line">    js: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.js</span><br><span class="line">    css: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.css</span><br><span class="line">  postbottom:</span><br><span class="line">    enable: true</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: bottomCenter</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span><br><span class="line">  float:</span><br><span class="line">    enable: false</span><br><span class="line">    options:</span><br><span class="line">      iconStyle: box</span><br><span class="line">      boxForm: horizontal</span><br><span class="line">      position: middleRight</span><br><span class="line">      networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook</span><br></pre></td></tr></table></figure><p>Likely</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># Likely Share</span><br><span class="line"># See: https://ilyabirman.net/projects/likely/, https://github.com/ilyabirman/Likely</span><br><span class="line"># Likely supports four looks, nine social networks, any button text.</span><br><span class="line"># You are free to modify the text value and order of any network.</span><br><span class="line">likely:</span><br><span class="line">  enable: true</span><br><span class="line">  cdn:</span><br><span class="line">    js: //cdn.jsdelivr.net/npm/ilyabirman-likely@2/release/likely.min.js</span><br><span class="line">    css: //cdn.jsdelivr.net/npm/ilyabirman-likely@2/release/likely.min.css</span><br><span class="line">  look: normal # available values: normal, light, small, big</span><br><span class="line">  networks:</span><br><span class="line">    twitter: Tweet</span><br><span class="line">    facebook: Share</span><br><span class="line">    linkedin: Link</span><br><span class="line">    gplus: Plus</span><br><span class="line">    vkontakte: Share</span><br><span class="line">    odnoklassniki: Class</span><br><span class="line">    telegram: Send</span><br><span class="line">    whatsapp: Send</span><br><span class="line">    pinterest: Pin</span><br></pre></td></tr></table></figure><p>Share.js</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># share.js</span><br><span class="line"># See: https://github.com/overtrue/share.js</span><br><span class="line"># networks: weibo,qq,wechat,tencent,douban,qzone,linkedin,diandian,facebook,twitter,google</span><br><span class="line">sharejs:</span><br><span class="line">  enable: true</span><br><span class="line">  cdn:</span><br><span class="line">    js: //cdn.jsdelivr.net/npm/social-share.js@1/dist/js/social-share.min.js</span><br><span class="line">    css: //cdn.jsdelivr.net/npm/social-share.js@1/dist/js/social-share.min.css</span><br><span class="line">  networks: weibo,qq,wechat,tencent,douban,qzone,linkedin,diandian,facebook,twitter,google</span><br><span class="line">  wechat_qrcode:</span><br><span class="line">    title: share.title</span><br><span class="line">    prompt: share.prompt</span><br></pre></td></tr></table></figure><p>– END –</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用SSH密钥进行Git协议传输</title>
      <link href="/posts/3a0aec94.html"/>
      <url>/posts/3a0aec94.html</url>
      
        <content type="html"><![CDATA[<h3 id="生成密钥"><a href="#生成密钥" class="headerlink" title="生成密钥"></a>生成密钥</h3><p>Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的用户都会提供一个公钥用于授权，没有的话可以生成一个，生成公钥的过程在所有操作系统上都差不多。</p><p>首先，你要确认一下本机是否已经有一个公钥。</p><p>SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录，进去看看：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/.ssh &amp;&amp; ls</span><br><span class="line"></span><br><span class="line">id_rsa    id_rsa.pub    known_hosts</span><br></pre></td></tr></table></figure><a id="more"></a><p>看一下有没有id_rsa和id_rsa.pub，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。</p><p>假如没有这些文件，甚至连 .ssh 目录都没有，可以用 ssh-keygen 来创建。</p><p><code>$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;</code></p><p><u><a href="mailto:your_email@youremail.com" target="_blank" rel="noopener">your_email@youremail.com</a></u> 是你的邮箱，然后一路Enter,完了之后，大概是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Your public key has been saved in /home/you/.ssh/id_rsa.pub.</span><br><span class="line">The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com</span><br></pre></td></tr></table></figure><h3 id="添加公钥到你的远程仓库"><a href="#添加公钥到你的远程仓库" class="headerlink" title="添加公钥到你的远程仓库"></a>添加公钥到你的远程仓库</h3><p>1、查看你生成的公钥：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ cat ~/.ssh/id_rsa.pub</span><br><span class="line"></span><br><span class="line">ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0X6L1zLL4VHuvGb8aJH3ippTozmReSUzgntvk434aJ/v7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8vR3c8E7CjZN733f5AL8uEYJA+YZevY5UCvEg+umT7PHghKYaJwaCxV7sjYP7Z6V79OMCEAGDNXC26IBMdMgOluQjp6o6j2KAdtRBdCDS/QIU5THQDxJ9lBXjk1fiq9tITo/aXBvjZeD+gH/Apkh/0GbO8VQLiYYmNfqqAHHeXdltORn8N7C9lOa/UW3KM7QdXo6J0GFlBVQeTE/IGqhMS5PMln3 uemail@email.com</span><br></pre></td></tr></table></figure><p>2、登陆你的github帐户。点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key</p><p>3、然后复制上面的公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字。</p><p>4、点击 Add key。</p><p>完成以后，验证下这个key是不是正常工作：</p><p><code>$ ssh -T git@github.com</code></p><p>如果，看到：</p><p><code>Hi xxx! You&#39;ve successfully authenticated, but GitHub does not # provide shell access.</code></p><p>恭喜你，你的设置已经成功了。</p><h3 id="修改git的remote-url"><a href="#修改git的remote-url" class="headerlink" title="修改git的remote url"></a>修改git的remote url</h3><p>使用命令 <u>git remote -v</u> 查看你当前的 <u>remote url</u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git remote -v</span><br><span class="line">origin https://github.com/uname/project.git (fetch)</span><br><span class="line">origin https://github.com/uname/project.git (push)</span><br></pre></td></tr></table></figure><p>如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议）</p><p>登陆你的github，打开project，点击Clone or download，你在上面可以看到你的ssh协议相应的url，类似：</p><p><code>git@github.com:uname/project.git</code></p><p>复制此ssh链接，然后使用命令 <u>git remote set-url</u> 来调整你的url。</p><p><code>$ git remote set-url origin git@github.com:uname/project.git</code></p><p>然后，你可以再用命令 <u>git remote -v</u> 查看一下，url是否已经变成了ssh地址。</p><p>最后,使用git fetch, git pull , git push，就再也不用输入密码了。</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
            <tag> git </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo页面静态压缩</title>
      <link href="/posts/96ad42a5.html"/>
      <url>/posts/96ad42a5.html</url>
      
        <content type="html"><![CDATA[<p>利用gulp对hexo静态页面进行压缩，提升网页加载速度。</p><h4 id="全局和目录安装gulp"><a href="#全局和目录安装gulp" class="headerlink" title="全局和目录安装gulp"></a>全局和目录安装gulp</h4><p><code>$ npm install gulp -g</code>  //全局安装</p><p><code>$ npm install gulp --save</code>  //站点目录下安装</p><p><code>$ gulp -v</code>  //查看版本</p><h4 id="安装gulp插件"><a href="#安装gulp插件" class="headerlink" title="安装gulp插件"></a>安装gulp插件</h4><a id="more"></a><p>在站点根目录下安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ npm install gulp-minify-css --save</span><br><span class="line">$ npm install gulp-uglify --save</span><br><span class="line">$ npm install gulp-htmlmin --save</span><br><span class="line">$ npm install gulp-htmlclean --save</span><br><span class="line">$ npm install gulp-imagemin --save</span><br></pre></td></tr></table></figure><h4 id="创建gulpfile-js文件"><a href="#创建gulpfile-js文件" class="headerlink" title="创建gulpfile.js文件"></a>创建gulpfile.js文件</h4><p>在 Hexo 站点下新建gulpfile.js文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">var gulp = require(&apos;gulp&apos;);</span><br><span class="line">var minifycss = require(&apos;gulp-minify-css&apos;);</span><br><span class="line">var uglify = require(&apos;gulp-uglify&apos;);</span><br><span class="line">var htmlmin = require(&apos;gulp-htmlmin&apos;);</span><br><span class="line">var htmlclean = require(&apos;gulp-htmlclean&apos;);</span><br><span class="line">var imagemin = require(&apos;gulp-imagemin&apos;);</span><br><span class="line">var babel = require(&apos;gulp-babel&apos;);</span><br><span class="line"></span><br><span class="line">// 压缩css文件</span><br><span class="line">gulp.task(&apos;minify-css&apos;, function (done) &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.css&apos;)</span><br><span class="line">        .pipe(minifycss())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 压缩html文件</span><br><span class="line">gulp.task(&apos;minify-html&apos;, function (done) &#123;</span><br><span class="line">    return gulp.src(&apos;./public/**/*.html&apos;)</span><br><span class="line">        .pipe(htmlclean())</span><br><span class="line">        .pipe(htmlmin(&#123;</span><br><span class="line">            removeComments: true,</span><br><span class="line">            minifyJS: true,</span><br><span class="line">            minifyCSS: true,</span><br><span class="line">            minifyURLs: true,</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 压缩js文件</span><br><span class="line">gulp.task(&apos;minify-js&apos;, function (done) &#123;</span><br><span class="line">    return gulp.src([&apos;./public/**/*.js&apos;, &apos;!./public/**/*.min.js&apos;])</span><br><span class="line">        .pipe(babel(&#123;</span><br><span class="line">            //将ES6代码转译为可执行的JS代码</span><br><span class="line">            presets: [&apos;es2015&apos;] // es5检查机制</span><br><span class="line">        &#125;))</span><br><span class="line">        .pipe(uglify())</span><br><span class="line">        .pipe(gulp.dest(&apos;./public&apos;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 压缩 public/images 目录内图片(Version&lt;3)</span><br><span class="line">// gulp.task(&apos;minify-images&apos;, function () &#123;</span><br><span class="line">//     gulp.src(&apos;./public/images/**/*.*&apos;)</span><br><span class="line">//         .pipe(imagemin(&#123;</span><br><span class="line">//             optimizationLevel: 5, //类型：Number  默认：3  取值范围：0-7（优化等级）</span><br><span class="line">//             progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片</span><br><span class="line">//             interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染</span><br><span class="line">//             multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化</span><br><span class="line">//         &#125;))</span><br><span class="line">//         .pipe(gulp.dest(&apos;./public/images&apos;));</span><br><span class="line">// &#125;);</span><br><span class="line"></span><br><span class="line">// 压缩 public/images 目录内图片(Version&gt;3)</span><br><span class="line">gulp.task(&apos;minify-images&apos;, function (done) &#123;</span><br><span class="line">    gulp.src(&apos;./public/images/**/*.*&apos;)</span><br><span class="line">        .pipe(imagemin([</span><br><span class="line">            imagemin.gifsicle(&#123;interlaced: true&#125;),</span><br><span class="line">            imagemin.jpegtran(&#123;progressive: true&#125;),</span><br><span class="line">            imagemin.optipng(&#123;optimizationLevel: 5&#125;),</span><br><span class="line">            imagemin.svgo(&#123;</span><br><span class="line">                plugins: [</span><br><span class="line">                    &#123;removeViewBox: true&#125;,</span><br><span class="line">                    &#123;cleanupIDs: false&#125;</span><br><span class="line">                ]</span><br><span class="line">            &#125;)</span><br><span class="line">        ]))</span><br><span class="line">        .pipe(gulp.dest(&apos;./public/images&apos;));</span><br><span class="line">    done();</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">//4.0以前的写法 </span><br><span class="line">//gulp.task(&apos;default&apos;, [</span><br><span class="line">//  &apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, &apos;minify-images&apos;</span><br><span class="line">//]);</span><br><span class="line">//4.0以后的写法</span><br><span class="line">// 执行 gulp 命令时执行的任务</span><br><span class="line">gulp.task(&apos;default&apos;, gulp.series(gulp.parallel(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, &apos;minify-images&apos;)), function () &#123;</span><br><span class="line">    console.log(&quot;----------gulp Finished----------&quot;);</span><br><span class="line">    // Do something after a, b, and c are finished.</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h4 id="gulp-babel-取消严格模式"><a href="#gulp-babel-取消严格模式" class="headerlink" title="gulp-babel 取消严格模式"></a>gulp-babel 取消严格模式</h4><p>首先创建.babelrc文件</p><p>在 Hexo 站点下新建.babelrc文件，文件内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &apos;presets&apos;: [&apos;es2015&apos;],</span><br><span class="line">    &quot;plugins&quot;: [&quot;transform-remove-strict-mode&quot;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后 gulp-babel 取消严格模式(“use strict”)命令：</p><p><code>$ npm install babel-plugin-transform-remove-strict-mode --save</code></p><h4 id="静态资源压缩"><a href="#静态资源压缩" class="headerlink" title="静态资源压缩"></a>静态资源压缩</h4><p>只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g</span><br><span class="line">$ gulp</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>问题1：如果安装gulp-imagemin错误请执行以下命令：</p><p><code>$ npm i gulp-imagemin --unsafe-perms</code></p><p>问题2: gulp 遇到 no gulpfile found</p><p><code>$ npm install gulp -g</code>  //重新全局安装一下gulp，注意gulp一定要先安装全局版本，再安装目录内版本，最好能保持两版本号一致</p><p><code>uname/blog/gulpfile.js</code>  //确定gulpfile.js文件是在hexo目录下</p><p>然后</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ gulp clean</span><br><span class="line">$ gulp</span><br></pre></td></tr></table></figure><p>– END –</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo </tag>
            
            <tag> gulp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux下搭建Hexo个人博客</title>
      <link href="/posts/a73fc4c5.html"/>
      <url>/posts/a73fc4c5.html</url>
      
        <content type="html"><![CDATA[<p>本博基于 <u>ubuntu18.04+git v2.17.1+NodeJS v8.10.0+hexo-cli: 2.0.0</u> 不同平台和版本实际操作可能略不同。</p><h4 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h4><h5 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h5><p><code>$ apt install git</code></p><h5 id="安装npm"><a href="#安装npm" class="headerlink" title="安装npm"></a>安装npm</h5><p><code>$ apt install npm</code></p><h5 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h5><p><code>$ apt install node.js</code></p><a id="more"></a><h5 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h5><p>1：安装hexo</p><p><code>$ npm install -g hexo</code></p><p>2：执行init命令初始化hexo,生成blog文件，就是你的博客根目录，所有的操作都在里面进行。</p><p><code>$ hexo init blog</code></p><p>3：生成静态网页</p><p><code>cd blog</code><br><code>$ hexo g</code></p><p>4：启动本地服务，进行文章预览调试</p><p><code>$ hexo server</code></p><p>浏览器输入 <u><a href="http://localhost:4000" target="_blank" rel="noopener">http://localhost:4000</a></u></p><h4 id="配置GitHub"><a href="#配置GitHub" class="headerlink" title="配置GitHub"></a>配置GitHub</h4><p>1：建立Repository</p><p>2：建立与你用户名对应的仓库，仓库名必须为 <u>yourname.github.io</u> ，固定写法</p><p>3：建立关联 <code>vi /users/blog/_config.yml</code></p><p>翻到最下面，改成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">deploy: </span><br><span class="line">    type: git </span><br><span class="line">    repository: https://github.com/yourname/yourname.github.io.git </span><br><span class="line">    #repository: git@github.com:yourname/yourname.github.io.git    //此是针对ssh密钥用户</span><br><span class="line">    branch: master</span><br></pre></td></tr></table></figure><p>4：执行命令：<code>$ npm install --save hexo-deployer-git</code></p><p>5：然后，执行配置命令：<code>$ hexo deploy</code><br>在浏览器中输入 <u><a href="http://yourname.github.io/" target="_blank" rel="noopener">http://yourname.github.io/</a></u></p><p>6：每次部署命令:</p><p><code>cd blog</code></p><p><code>$ hexo g -d</code></p><h4 id="配置自己的域名"><a href="#配置自己的域名" class="headerlink" title="配置自己的域名"></a>配置自己的域名</h4><p>1： 首先设置域名DNS解析，Type 改成 CNAME, Target 填上 yourname.github.io, 保存</p><p>2： 在 source 下创建一个名为 CNAME 的文件，内容为你要使用的域名，如本博客为 <a href="http://www.12ab.cf">www.12ab.cf</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd blog/source</span><br><span class="line">echo &quot;www.12ab.cf&quot; &gt; CNAME</span><br></pre></td></tr></table></figure><p>3: 编辑 _config.yml，使 url 的内容为你的主页地址，如本博客为 <u><a href="https://www.12ab.cf">https://www.12ab.cf</a></u></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /users/blog/_config.yml</span><br><span class="line"></span><br><span class="line">url: https://www.12ab.cf</span><br></pre></td></tr></table></figure><p>4: 部署到 git 后，进入 github，打开网站所在项目，点击 Settings/GitHub Pages ,勾选 Enforce HTTPS</p><h4 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h4><p><code>hexo new&quot;postname&quot;</code> 新建文章</p><p><code>hexo new page&quot;pagename&quot;</code> 新建页面</p><p><code>hexo clean</code> 清理缓存</p><p><code>hexo generate</code> 生成静态页面</p><p><code>hexo server</code> 开启预览访问端口</p><p><code>hexo deploy</code> 将.deploy目录部署到GitHub</p><p>博客文章在 <u>/blog/source/_posts</u> 文章支持Markdown语法。如果想修改头像可以直接在主题的 <u>_config.yml</u> 文件里面修改，友情链接，之类的都在这里。</p><p>上面的是Linux搭建方法，相信大家用Windows的比较多。推荐朋友的<a href="https://blog.cat73.org/20160608/2016060801.github-hexo/" target="_blank" rel="noopener">Windows搭建教程</a></p><p>– END –</p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> next </tag>
            
            <tag> hexo </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
