<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[使用SSH密钥进行Git协议传输]]></title>
    <url>%2F2019%2F09%2F09%2F%E4%BD%BF%E7%94%A8SSH%E5%AF%86%E9%92%A5%E8%BF%9B%E8%A1%8CGit%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%2F</url>
    <content type="text"><![CDATA[生成密钥Git 服务器都会选择使用 SSH 公钥来进行授权。系统中的用户都会提供一个公钥用于授权，没有的话可以生成一个，生成公钥的过程在所有操作系统上都差不多。 首先，你要确认一下本机是否已经有一个公钥。 SSH 公钥默认储存在账户的主目录下的 ~/.ssh 目录，进去看看： $ cd ~/.ssh &amp;&amp; ls id_rsa&emsp;&emsp;id_rsa.pub&emsp;&emsp;known_hosts 看一下有没有id_rsa和id_rsa.pub，有 .pub 后缀的文件就是公钥，另一个文件则是密钥。 假如没有这些文件，甚至连 .ssh 目录都没有，可以用 ssh-keygen 来创建。 $ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot; your_email@youremail.com是你的邮箱，然后一路Enter,完了之后，大概是这样： 12Your public key has been saved in /home/you/.ssh/id_rsa.pub.The key fingerprint is: # 01:0f:f4:3b:ca:85:d6:17:a1:7d:f0:68:9d:f0:a2:db your_email@youremail.com 添加公钥到你的远程仓库1、查看你生成的公钥： 123$ cat ~/.ssh/id_rsa.pubssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABAQC0X6L1zLL4VHuvGb8aJH3ippTozmReSUzgntvk434aJ/v7kOdJ/MTyBlWXFCR+HAo3FXRitBqxiX1nKhXpHAZsMciLq8vR3c8E7CjZN733f5AL8uEYJA+YZevY5UCvEg+umT7PHghKYaJwaCxV7sjYP7Z6V79OMCEAGDNXC26IBMdMgOluQjp6o6j2KAdtRBdCDS/QIU5THQDxJ9lBXjk1fiq9tITo/aXBvjZeD+gH/Apkh/0GbO8VQLiYYmNfqqAHHeXdltORn8N7C9lOa/UW3KM7QdXo6J0GFlBVQeTE/IGqhMS5PMln3 uemail@email.com 2、登陆你的github帐户。点击你的头像，然后 Settings -&gt; 左栏点击 SSH and GPG keys -&gt; 点击 New SSH key 3、然后复制上面的公钥内容，粘贴进“Key”文本域内。 title域，自己随便起个名字。 4、点击 Add key。 完成以后，验证下这个key是不是正常工作： $ ssh -T git@github.com 如果，看到： Hi xxx! You&#39;ve successfully authenticated, but GitHub does not # provide shell access. 恭喜你，你的设置已经成功了。 修改git的remote url使用命令 git remote -v 查看你当前的 remote url 123$ git remote -vorigin https://github.com/uname/project.git (fetch)origin https://github.com/uname/project.git (push) 如果是以上的结果那么说明此项目是使用https协议进行访问的（如果地址是git开头则表示是git协议） 登陆你的github，打开project，点击Clone or download，你在上面可以看到你的ssh协议相应的url，类似： git@github.com:uname/project.git 复制此ssh链接，然后使用命令 git remote set-url 来调整你的url。 $ git remote set-url origin git@github.com:uname/project.git 然后，你可以再用命令 git remote -v 查看一下，url是否已经变成了ssh地址。 最后,使用git fetch, git pull , git push，就再也不用输入密码了。]]></content>
      <categories>
        <category>Linux - git - ssh</category>
      </categories>
      <tags>
        <tag>linux</tag>
        <tag>ssh</tag>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hexo页面静态压缩和添加分享，置顶笔记]]></title>
    <url>%2F2019%2F09%2F08%2FHexo%E9%A1%B5%E9%9D%A2%E9%9D%99%E6%80%81%E5%8E%8B%E7%BC%A9%E5%92%8C%E6%B7%BB%E5%8A%A0%E5%88%86%E4%BA%AB%EF%BC%8C%E7%BD%AE%E9%A1%B6%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[利用gulp对hexo静态页面进行压缩，提升网页加载速度；针对next-v7.4.0的一些小修小改 页面静态压缩全局安装gulpnpm install gulp -g gulp -v //查看版本 安装gulp插件 在站点根目录下安装 123456npm install gulp --savenpm install gulp-minify-css --savenpm install gulp-uglify --savenpm install gulp-htmlmin --savenpm install gulp-htmlclean --savenpm install gulp-imagemin --save 创建gulpfile.js文件在 Hexo 站点下新建gulpfile.js文件，文件内容如下： 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182var gulp = require(&apos;gulp&apos;);var minifycss = require(&apos;gulp-minify-css&apos;);var uglify = require(&apos;gulp-uglify&apos;);var htmlmin = require(&apos;gulp-htmlmin&apos;);var htmlclean = require(&apos;gulp-htmlclean&apos;);var imagemin = require(&apos;gulp-imagemin&apos;);var babel = require(&apos;gulp-babel&apos;);// 压缩css文件gulp.task(&apos;minify-css&apos;, function (done) &#123; return gulp.src(&apos;./public/**/*.css&apos;) .pipe(minifycss()) .pipe(gulp.dest(&apos;./public&apos;)); done();&#125;);// 压缩html文件gulp.task(&apos;minify-html&apos;, function (done) &#123; return gulp.src(&apos;./public/**/*.html&apos;) .pipe(htmlclean()) .pipe(htmlmin(&#123; removeComments: true, minifyJS: true, minifyCSS: true, minifyURLs: true, &#125;)) .pipe(gulp.dest(&apos;./public&apos;)); done();&#125;);// 压缩js文件gulp.task(&apos;minify-js&apos;, function (done) &#123; return gulp.src([&apos;./public/**/*.js&apos;, &apos;!./public/**/*.min.js&apos;]) .pipe(babel(&#123; //将ES6代码转译为可执行的JS代码 presets: [&apos;es2015&apos;] // es5检查机制 &#125;)) .pipe(uglify()) .pipe(gulp.dest(&apos;./public&apos;)); done();&#125;);// 压缩 public/images 目录内图片(Version&lt;3)// gulp.task(&apos;minify-images&apos;, function () &#123;// gulp.src(&apos;./public/images/**/*.*&apos;)// .pipe(imagemin(&#123;// optimizationLevel: 5, //类型：Number 默认：3 取值范围：0-7（优化等级）// progressive: true, //类型：Boolean 默认：false 无损压缩jpg图片// interlaced: false, //类型：Boolean 默认：false 隔行扫描gif进行渲染// multipass: false, //类型：Boolean 默认：false 多次优化svg直到完全优化// &#125;))// .pipe(gulp.dest(&apos;./public/images&apos;));// &#125;);// 压缩 public/images 目录内图片(Version&gt;3)gulp.task(&apos;minify-images&apos;, function (done) &#123; gulp.src(&apos;./public/images/**/*.*&apos;) .pipe(imagemin([ imagemin.gifsicle(&#123;interlaced: true&#125;), imagemin.jpegtran(&#123;progressive: true&#125;), imagemin.optipng(&#123;optimizationLevel: 5&#125;), imagemin.svgo(&#123; plugins: [ &#123;removeViewBox: true&#125;, &#123;cleanupIDs: false&#125; ] &#125;) ])) .pipe(gulp.dest(&apos;./public/images&apos;)); done();&#125;);//4.0以前的写法 //gulp.task(&apos;default&apos;, [// &apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, &apos;minify-images&apos;//]);//4.0以后的写法// 执行 gulp 命令时执行的任务gulp.task(&apos;default&apos;, gulp.series(gulp.parallel(&apos;minify-html&apos;, &apos;minify-css&apos;, &apos;minify-js&apos;, &apos;minify-images&apos;)), function () &#123; console.log(&quot;----------gulp Finished----------&quot;); // Do something after a, b, and c are finished.&#125;); gulp-babel 取消严格模式首先创建.babelrc文件 在 Hexo 站点下新建.babelrc文件，文件内容如下： 1234&#123; &apos;presets&apos;: [&apos;es2015&apos;], &quot;plugins&quot;: [&quot;transform-remove-strict-mode&quot;]&#125; 然后 gulp-babel 取消严格模式(“use strict”)命令： npm install babel-plugin-transform-remove-strict-mode --save 静态资源压缩只需要每次在执行 generate 命令后执行 gulp 就可以实现对静态资源的压缩 123hexo ggulphexo d 问题1：如果安装gulp-imagemin错误请执行以下命令： sudo npm i gulp-imagemin --unsafe-perms 问题2: gulp 遇到 no gulpfile found npm install gulp -g //重新全局安装一下gulp，注意gulp一定要先安装全局版本，再安装目录内版本，最好能保持两版本号一致 uname/blog/gulpfile.js //确定gulpfile.js文件是在hexo目录下 然后 12gulp cleangulp 添加博客置顶安装插件12$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save 添加置顶开关找到/blog/scaffolds/post.md添加 1234567---title: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:top: false--- 然后每次新建博客 hexo new&quot;postname&quot; 会显示页面 1234567---title: top: falsedate: tags:categories:--- top: false 改成 true 就开启了文章置顶 设置置顶标志打开：/themes/next/layout/_macro目录下的post.swig文件，定位到&lt;div class=&quot;post-meta&quot;&gt;标签下，插入如下代码： 12345&#123;% if post.top %&#125; &lt;i class=&quot;fa fa-thumb-tack&quot;&gt;&lt;/i&gt; &lt;font color=green&gt;置顶&lt;/font&gt; &lt;span class=&quot;post-meta-divider&quot;&gt;|&lt;/span&gt;&#123;% endif %&#125; 就能在博客页头看到“置顶”标记了 添加分享安装share插件npm install --save theme-next/hexo-next-share#last-release 添加Need More Share, Likely, Share.js以下任选一种在 themes/_config.yml 里添加即可 Need More Share 12345678910111213141516171819202122232425262728# NeedMoreShare2# Dependencies: https://github.com/theme-next/theme-next-needmoreshare2# For more information: https://github.com/revir/need-more-share2# iconStyle: default | box# boxForm: horizontal | vertical# position: top / middle / bottom + Left / Center / Right# networks:# Weibo | Wechat | Douban | QQZone | Twitter | Facebook | Linkedin | Mailto | Reddit | Delicious | StumbleUpon | Pinterest# GooglePlus | Tumblr | GoogleBookmarks | Newsvine | Evernote | Friendfeed | Vkontakte | Odnoklassniki | Mailruneedmoreshare: enable: true cdn: js: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.js css: //cdn.jsdelivr.net/gh/theme-next/theme-next-needmoreshare2@1/needsharebutton.min.css postbottom: enable: true options: iconStyle: box boxForm: horizontal position: bottomCenter networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook float: enable: false options: iconStyle: box boxForm: horizontal position: middleRight networks: Weibo,Wechat,Douban,QQZone,Twitter,Facebook Likely 1234567891011121314151617181920# Likely Share# See: https://ilyabirman.net/projects/likely/, https://github.com/ilyabirman/Likely# Likely supports four looks, nine social networks, any button text.# You are free to modify the text value and order of any network.likely: enable: true cdn: js: //cdn.jsdelivr.net/npm/ilyabirman-likely@2/release/likely.min.js css: //cdn.jsdelivr.net/npm/ilyabirman-likely@2/release/likely.min.css look: normal # available values: normal, light, small, big networks: twitter: Tweet facebook: Share linkedin: Link gplus: Plus vkontakte: Share odnoklassniki: Class telegram: Send whatsapp: Send pinterest: Pin Share.js 123456789101112# share.js# See: https://github.com/overtrue/share.js# networks: weibo,qq,wechat,tencent,douban,qzone,linkedin,diandian,facebook,twitter,googlesharejs: enable: true cdn: js: //cdn.jsdelivr.net/npm/social-share.js@1/dist/js/social-share.min.js css: //cdn.jsdelivr.net/npm/social-share.js@1/dist/js/social-share.min.css networks: weibo,qq,wechat,tencent,douban,qzone,linkedin,diandian,facebook,twitter,google wechat_qrcode: title: share.title prompt: share.prompt – END –]]></content>
      <categories>
        <category>hexo - gulp</category>
      </categories>
      <tags>
        <tag>gulp</tag>
        <tag>share</tag>
        <tag>top</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Linux下搭建Hexo个人博客]]></title>
    <url>%2F2019%2F09%2F02%2FLinux%E4%B8%8B%E6%90%AD%E5%BB%BAHexo%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2%2F</url>
    <content type="text"><![CDATA[本博基于ubuntu18.04+git v2.17.1+NodeJS v8.10.0+hexo-cli: 2.0.0 不同平台和版本实际操作可能略不同。 安装依赖安装Gitsudo apt install git 安装npmsudo apt install npm 安装Node.jssudo apt install node.js 安装Hexo1：安装hexo sudo npm install -g hexo 2：执行init命令初始化hexo,生成blog文件，就是你的博客根目录，所有的操作都在里面进行。 hexo init blog 3：生成静态网页 cd bloghexo g 4：启动本地服务，进行文章预览调试 hexo server 浏览器输入 http://localhost:4000 配置GitHub1：建立Repository 2：建立与你用户名对应的仓库，仓库名必须为【yourname.github.io】，固定写法 3：建立关联 vi /users/blog/_config.yml 翻到最下面，改成： 12345deploy: type: git repository: https://github.com/yourname/yourname.github.io.git #repository: git@github.com:yourname/yourname.github.io.git //此是针对ssh密钥用户 branch: master 4：执行命令：npm install --save hexo-deployer-git 5：然后，执行配置命令：hexo deploy在浏览器中输入 http://yourname.github.io/ 6：每次部署命令: cd blog hexo g -d 常用命令hexo new&quot;postname&quot; 新建文章 hexo new page&quot;pagename&quot; 新建页面 hexo clean 清理缓存 hexo generate 生成静态页面 hexo server 开启预览访问端口 hexo deploy 将.deploy目录部署到GitHub 博客文章在 /blog/source/_posts 文章支持Markdown语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里。 上面的是Linux搭建方法，相信大家用Windows的比较多。推荐朋友的Windows搭建教程]]></content>
      <categories>
        <category>前端 - hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>next</tag>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
